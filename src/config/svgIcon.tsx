// import { Input } from '../../components/input/input';
import React from 'react';
import Svg, {
  G,
  Path,
  Ellipse,
  ClipPath,
  Defs,
  Use,
  Circle,
  LinearGradient,
  Stop,
  Rect,
  SvgProps,
} from 'react-native-svg';

const Icons = {
  update(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        xmlns="http://www.w3.org/2000/svg"
        width={102}
        height={101}
        viewBox="0 0 102 101"
        {...props}
      >
        <Defs>
          <LinearGradient
            id="prefix__a"
            x1={0.5}
            y1={1}
            x2={0.5}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#cbcbff" />
            <Stop offset={0.97} stopColor="#f0f0ff" />
            <Stop offset={1} stopColor="#eaf6ff" />
          </LinearGradient>
          <LinearGradient
            id="prefix__b"
            x1={0.5}
            y1={1}
            x2={0.5}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#2a62ee" />
            <Stop offset={1} stopColor="#006" />
          </LinearGradient>
        </Defs>
        <Ellipse cx={51} cy={50.5} rx={51} ry={50.5} fill="url(#prefix__a)" />
        <Path
          d="M164.558 144.983a1.758 1.758 0 00-1.55-.927h-2.287a26.388 26.388 0 00-48.11-8.83 1.752 1.752 0 00.578 2.445l6.039 3.617a1.758 1.758 0 002.379-.548 15.828 15.828 0 0128.192 3.316h-.855a1.755 1.755 0 00-1.463 2.728l7.031 10.528a1.759 1.759 0 002.925 0l7.031-10.528a1.755 1.755 0 00.088-1.8zm-8.54 17.294l-5.428-4.515a1.762 1.762 0 00-2.584.367 15.828 15.828 0 01-28.041-3.544h.855a1.755 1.755 0 001.463-2.728l-7.031-10.528a1.826 1.826 0 00-2.925 0l-7.027 10.527a1.755 1.755 0 001.463 2.728h2.287a26.388 26.388 0 0047.275 10.064 1.754 1.754 0 00-.3-2.372z"
          transform="translate(-84.222 -98.982)"
          fill="url(#prefix__b)"
        />
      </Svg>
    );
  },
  check2(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={405.272}
        height={405.272}
        viewBox="0 0 405.272 405.272"
        {...props}
      >
        <Path d="M393.401 124.425L179.603 338.208c-15.832 15.835-41.514 15.835-57.361 0L11.878 227.836c-15.838-15.835-15.838-41.52 0-57.358 15.841-15.841 41.521-15.841 57.355-.006l81.698 81.699L336.037 67.064c15.841-15.841 41.523-15.829 57.358 0 15.835 15.838 15.835 41.514.006 57.361z" />
      </Svg>
    );
  },
  eyeOf(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg viewBox="0 0 477.871 477.871" {...props}>
        <Path d="M474.609 228.901a453.124 453.124 0 00-103.219-98.287l67.345-67.345c6.78-6.548 6.968-17.352.42-24.132-6.548-6.78-17.352-6.968-24.132-.42-.142.137-.282.277-.42.42l-73.574 73.506a220.702 220.702 0 00-102.093-27.307C109.229 85.336 7.529 223.03 3.262 228.9a17.068 17.068 0 000 20.07 453.124 453.124 0 00103.219 98.287l-67.345 67.345c-6.78 6.548-6.968 17.352-.42 24.132 6.548 6.78 17.352 6.968 24.132.42.142-.137.282-.277.42-.42l73.574-73.506a220.702 220.702 0 00102.093 27.307c129.707 0 231.407-137.694 235.674-143.565a17.063 17.063 0 000-20.069zm-343.313 93.593a424.95 424.95 0 01-92.484-83.558c25.122-30.43 106.598-119.467 200.124-119.467a180.655 180.655 0 0176.612 18.773L285.92 167.87c-39.2-26.025-92.076-15.345-118.101 23.855-18.958 28.555-18.958 65.691 0 94.246l-36.523 36.523zm153.72-105.489a50.36 50.36 0 015.12 21.931c0 28.277-22.923 51.2-51.2 51.2a50.36 50.36 0 01-21.931-5.12l68.011-68.011zm-92.16 43.861a50.36 50.36 0 01-5.12-21.931c0-28.277 22.923-51.2 51.2-51.2a50.36 50.36 0 0121.931 5.12l-68.011 68.011zm46.08 97.536a180.659 180.659 0 01-76.612-18.773l29.628-29.628c39.2 26.025 92.076 15.345 118.101-23.855 18.958-28.555 18.958-65.691 0-94.246l36.523-36.523a424.975 424.975 0 0192.484 83.558c-25.123 30.431-106.599 119.467-200.124 119.467z" />
      </Svg>
    );
  },
  check(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg height="512pt" viewBox="0 0 512 512" width="512pt" {...props}>
        <Path d="M369.164 174.77c7.813 7.812 7.813 20.476 0 28.285L234.992 337.23c-7.812 7.81-20.472 7.81-28.285 0l-63.871-63.875c-7.813-7.808-7.813-20.472 0-28.28 7.809-7.813 20.473-7.813 28.281 0l49.73 49.73L340.88 174.77c7.812-7.81 20.476-7.81 28.285 0zM512 256c0 141.504-114.516 256-256 256C114.496 512 0 397.484 0 256 0 114.496 114.516 0 256 0c141.504 0 256 114.516 256 256zm-40 0c0-119.395-96.621-216-216-216-119.395 0-216 96.621-216 216 0 119.395 96.621 216 216 216 119.395 0 216-96.621 216-216zm0 0" />
      </Svg>
    );
  },
  edit(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg viewBox="0 0 348.882 348.882" {...props}>
        <Path d="M333.988 11.758l-.42-.383A43.363 43.363 0 00304.258 0a43.579 43.579 0 00-32.104 14.153L116.803 184.231a14.993 14.993 0 00-3.154 5.37l-18.267 54.762c-2.112 6.331-1.052 13.333 2.835 18.729 3.918 5.438 10.23 8.685 16.886 8.685h.001c2.879 0 5.693-.592 8.362-1.76l52.89-23.138a14.985 14.985 0 005.063-3.626L336.771 73.176c16.166-17.697 14.919-45.247-2.783-61.418zM130.381 234.247l10.719-32.134.904-.99 20.316 18.556-.904.99-31.035 13.578zm184.24-181.304L182.553 197.53l-20.316-18.556L294.305 34.386c2.583-2.828 6.118-4.386 9.954-4.386 3.365 0 6.588 1.252 9.082 3.53l.419.383c5.484 5.009 5.87 13.546.861 19.03z" />
        <Path d="M303.85 138.388c-8.284 0-15 6.716-15 15v127.347c0 21.034-17.113 38.147-38.147 38.147H68.904c-21.035 0-38.147-17.113-38.147-38.147V100.413c0-21.034 17.113-38.147 38.147-38.147h131.587c8.284 0 15-6.716 15-15s-6.716-15-15-15H68.904C31.327 32.266.757 62.837.757 100.413v180.321c0 37.576 30.571 68.147 68.147 68.147h181.798c37.576 0 68.147-30.571 68.147-68.147V153.388c.001-8.284-6.715-15-14.999-15z" />
      </Svg>
    );
  },
  iraqFlag(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg viewBox="0 0 512 512" {...props}>
        <Path
          d="M473.655 88.276H38.345C17.167 88.276 0 105.443 0 126.621v73.471h512v-73.471c0-21.178-17.167-38.345-38.345-38.345z"
          fill="#ff4b55"
        />
        <Path
          d="M0 385.379c0 21.177 17.167 38.345 38.345 38.345h435.31c21.177 0 38.345-17.167 38.345-38.345v-73.471H0v73.471z"
          fill="#464655"
        />
        <Path fill="#f5f5f5" d="M0 200.09h512V311.9H0z" />
        <G fill="#73af00">
          <Path d="M308.065 233.525c-.928-.483-2.027-2.211-1.684-2.967.361-.793-.201-.725 1.696-.161 3.43.888 5.65.483 7.829-1.372l1.937-1.533 2.261 1.13c1.25.564 2.541.967 2.905.886 1.049-.242 3.069-2.825 3.027-3.713-.041-1.208.847-.886 1.291.405.928 2.422-.779 6.599-3.121 7.164-1.128.322-2.178.242-3.955-.322-2.098-.808-2.422-.808-3.55 0-2.34 1.856-5.69 2.019-8.636.483M316.9 224.182c-1.132-1.587-2.493-7.14-2.095-8.499.395-1.248.792-1.474 1.869-1.134 1.927.679 2.382 1.927 2.153 6.462-.34 3.397-.792 4.532-1.927 3.171M241.005 248.73c-4.651 2.646-11.569 3.101-11.569 10.434-10.13.377-22.076.831-32.85.604 2.92-3.772 21.401-20.853 29.086-27.623 1.272-1.12 1.704-3.288.964-4.813l-.199-.41c-1.108-2.285-4.122-2.829-5.958-1.074-7.658 7.326-15.247 14.152-16.483 15.322-9.916 10.02-12.822 12.94-14.38 14.508a5.915 5.915 0 00-1.718 4.2l.001.103a5.942 5.942 0 005.942 5.911h43.381c2.457 0-.565-8.543 2.609-8.543 2.207 0 2.41 3.065 2.313 6.312-.074 2.47-2.109 4.424-4.579 4.427-18.755.026-38.279.205-56.651.222a2.737 2.737 0 01-2.735-2.748v-3.305c0-2.802-3.112-4.431-5.454-2.893-.086.056-.17.11-.254.162-1.224.765-1.85 2.263-1.372 3.624.31.884.445 1.96.474 3.085.04 1.487-1.171 2.713-2.658 2.759-6.076.186-12.679.241-14.554-3.342-1.058-2.02-3.309-2.975-5.35-1.954l-.271.136c-2.148 1.074-3.009 3.731-1.832 5.824 2.238 3.979 4.28 8.595 3.22 15.06-.864 2.038-2.492 3.313-4.256 4.461-1.96 1.276-.73 4.262 1.569 3.837 5.574-1.03 9.415-5.442 10.589-10.642h86.42a5.74 5.74 0 005.739-5.739V257.88c-.792-5.595-6.804-5.369-9.184-9.15zM350.62 223.947c1.275.82 2.552 1.641 3.975 2.319 1.556.743 2.151 2.643 1.241 4.107-.241.387-.441.82-.556 1.346v37.197c2.542.527 4.001.028 5.16-.771a2.263 2.263 0 013.489 1.288c.877 3.263 2.313 6.45 3.079 9.352a2.855 2.855 0 01-2.759 3.588h-14.572a2.336 2.336 0 01-2.336-2.336v-54.3c-.002-1.682 1.863-2.701 3.279-1.79zM332.975 233.005c.011 10.272.131 21.335.148 32.345a2.58 2.58 0 01-2.582 2.583h-.167a2.58 2.58 0 01-2.58-2.58v-26.09c0-1.42-1.669-2.179-2.737-1.245l-3.42 2.955a3.179 3.179 0 00-1.105 2.397c-.011 4.244-.049 16.6-.064 21.994a2.578 2.578 0 01-2.58 2.569h-.234a2.576 2.576 0 01-2.58-2.557 5136.03 5136.03 0 01-.087-15.238c-.006-1.436-1.704-2.186-2.784-1.24-3.543 3.105-4.361 3.808-6.22 5.728.151.983.908 0 1.361.755v4.991c-12.908-2.43-13.871 7.882-13.388 18.946a3.11 3.11 0 003.102 2.978h40.526a2.72 2.72 0 002.721-2.721v-50.381c0-1.683-1.997-2.547-3.239-1.41-.99.906-2.047 1.813-2.955 2.634a3.487 3.487 0 00-1.136 2.587zm-29.825 34.551c-.793-2.268 3.668-3.101 4.196-1.058.189 2.495-3.212 2.57-4.196 1.058z" />
          <Path d="M169.295 286.38c1.55 0 2.797 1.286 2.797 2.796a2.767 2.767 0 01-2.797 2.798c-1.587 0-2.874-1.209-2.874-2.798.001-1.51 1.288-2.796 2.874-2.796M261.44 225.087c.757.455 1.535.89 2.364 1.281 1.496.707 2.086 2.566 1.171 3.945a4.43 4.43 0 00-.648 1.482v37.121c2.694.599 4.167.012 5.342-.857 1.17-.865 2.854-.267 3.229 1.138.672 2.52 1.685 5.012 2.466 7.378.956 2.893-1.19 5.874-4.237 5.874H259.76a3.333 3.333 0 01-3.333-3.334v-51.153c0-2.572 2.807-4.2 5.013-2.875z" />
        </G>
      </Svg>
    );
  },
  apple(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={18.845}
        height={22.976}
        viewBox="0 0 18.845 22.976"
        {...props}
      >
        <Defs></Defs>
        <Path d="M6.248 22.976C2.829 22.956 0 15.976 0 12.421c0-5.812 4.358-7.079 6.035-7.079a6.944 6.944 0 012.277.56 5.09 5.09 0 001.3.373 4.046 4.046 0 00.933-.3 7.476 7.476 0 012.811-.68h.007a5.763 5.763 0 014.823 2.434l.352.528-.506.382a4.259 4.259 0 00-2.042 3.512 3.964 3.964 0 002.212 3.665c.317.191.645.387.645.817 0 .281-2.24 6.308-5.493 6.308a4.418 4.418 0 01-1.855-.45 3.762 3.762 0 00-1.651-.4 4.247 4.247 0 00-1.307.354 6.4 6.4 0 01-2.268.529zM13.697 0c.085 3.055-2.1 5.174-4.282 5.041C9.059 2.6 11.597 0 13.697 0z" />
      </Svg>
    );
  },
  google(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={21.096}
        height={21.096}
        viewBox="0 0 21.096 21.096"
        {...props}
      >
        <Defs>
          <ClipPath id="prefix__a">
            <Path
              d="M19.932 0H1.164A1.164 1.164 0 000 1.164v18.769A1.164 1.164 0 001.164 21.1h18.768a1.164 1.164 0 001.168-1.168V1.164A1.164 1.164 0 0019.932 0zm0 0"
              fill="#2a2a2a"
            />
          </ClipPath>
        </Defs>
        <G clipPath="url(#prefix__a)">
          <Path d="M4.944 10.548a5.569 5.569 0 01.788-2.863V4.129H2.176a10.554 10.554 0 000 12.838h3.557v-3.556a5.569 5.569 0 01-.789-2.863zM10.548 16.152l-2.472 2.472 2.472 2.472a10.468 10.468 0 006.416-2.177v-3.552h-3.55a5.6 5.6 0 01-2.866.785z" />
          <Path d="M5.733 13.41l-3.556 3.557a10.716 10.716 0 00.913 1.04 10.479 10.479 0 007.459 3.09v-4.946a5.606 5.606 0 01-4.816-2.741zM21.096 10.548a10.64 10.64 0 00-.173-1.911l-.093-.507H10.548v4.945h5a5.578 5.578 0 01-2.138 2.292l3.552 3.552a10.716 10.716 0 001.04-.913 10.479 10.479 0 003.094-7.458zM14.51 6.586l.437.437 3.5-3.5-.437-.437A10.479 10.479 0 0010.548 0L8.076 2.472l2.472 2.472a5.567 5.567 0 013.962 1.642z" />
          <Path d="M10.549 4.944V0A10.479 10.479 0 003.09 3.089a10.707 10.707 0 00-.913 1.04l3.556 3.556a5.606 5.606 0 014.815-2.741z" />
        </G>
      </Svg>
    );
  },
  facebook(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={20.922}
        height={20.922}
        viewBox="0 0 20.922 20.922"
        {...props}
      >
        <Defs>
          <ClipPath id="prefix__a">
            <Path d="M19.768 0H1.154A1.155 1.155 0 000 1.155v18.614a1.155 1.155 0 001.155 1.154h18.613a1.155 1.155 0 001.155-1.154V1.154A1.155 1.155 0 0019.768 0zm0 0" />
          </ClipPath>
        </Defs>
        <G clipPath="url(#prefix__a)">
          <Path d="M19.768 0H1.154A1.155 1.155 0 000 1.155v18.614a1.155 1.155 0 001.155 1.154h18.613a1.155 1.155 0 001.155-1.154V1.154A1.155 1.155 0 0019.768 0zm0 0" />
          <Path
            d="M14.446 20.923v-8.091h2.728l.408-3.167h-3.136V7.648c0-.915.254-1.538 1.566-1.538h1.663V3.284a22.349 22.349 0 00-2.436-.125 3.8 3.8 0 00-4.062 4.175v2.331H8.459v3.167h2.718v8.091zm0 0"
            fill="#4267b2"
          />
        </G>
      </Svg>
    );
  },
  refresh(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={19.562}
        height={21.067}
        viewBox="0 0 19.562 21.067"
        {...props}
      >
        <Defs></Defs>
        <Path d="M17.304 0a.752.752 0 00-.752.752V3.5A9.762 9.762 0 000 10.532a.752.752 0 101.5 0 8.276 8.276 0 0114.385-5.585l-3.333 1.111a.753.753 0 00.476 1.429l4.514-1.5a.752.752 0 00.515-.716V.752A.752.752 0 0017.304 0zM18.806 9.781a.752.752 0 00-.752.752 8.276 8.276 0 01-14.381 5.586l3.333-1.111a.753.753 0 00-.475-1.43l-4.514 1.5a.752.752 0 00-.515.716v4.52a.752.752 0 101.5 0v-2.748a9.762 9.762 0 0016.552-7.033.752.752 0 00-.748-.752z" />
      </Svg>
    );
  },

  lowPrice(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={19.15} height={18.621} viewBox="0 0 19.15 18.621" {...props}>
        <Defs></Defs>
        <Path d="M8.058 14.316a2.234 2.234 0 003.009.005l5.963-5.626-1.56-1.267-5.905 5.573-5.889-5.564-1.561 1.264z" />
        <Path d="M10.639 13.035H8.511V0h2.128zM19.15 18.621H0v-1.862h19.15z" />
      </Svg>
    );
  },
  highPrice(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={19.15} height={18.621} viewBox="0 0 19.15 18.621" {...props}>
        <Defs></Defs>
        <Path d="M11.092 4.306A2.234 2.234 0 008.083 4.3L2.12 9.927l1.565 1.265 5.9-5.571 5.889 5.564 1.561-1.265z" />
        <Path d="M8.511 5.586h2.128v13.035H8.511zM0 0h19.15v1.862H0z" />
      </Svg>
    );
  },

  close(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg
        width={16.254}
        height={16.254}
        viewBox="0 0 16.254 16.254"
        {...props}
      >
        <Path
          d="M9.616 8.127l6.329-6.329A1.053 1.053 0 0014.456.309L8.127 6.638 1.8.309A1.054 1.054 0 00.309 1.798l6.329 6.329-6.329 6.329A1.054 1.054 0 101.8 15.945l6.327-6.329 6.329 6.329a1.053 1.053 0 101.489-1.489zm0 0"
          fill={props.fill || '#6a6a6a'}
        />
      </Svg>
    );
  },

  logoText(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={131.536}
        height={91.53}
        viewBox="0 0 131.536 91.53"
        {...props}
      >
        <G data-name="Group 2794" fill="#fff">
          <G data-name="Group 2792">
            <Path
              data-name="Path 3489"
              d="M22.347 46.255l-.284 3.173h-3.031a6.457 6.457 0 00-3.315.616 3.6 3.6 0 00-1.8 3.126 6.048 6.048 0 001.421 3.694l5.821 7.577a10.134 10.134 0 012.131 6.394 9.434 9.434 0 01-3.742 7.814 12.729 12.729 0 01-8.146 2.51H6.719l.332-3.173h4.073a6.415 6.415 0 004.31-1.3 4.2 4.2 0 001.516-3.338 7.181 7.181 0 00-1.564-4.262l-6.535-9.045a7.227 7.227 0 01-1.373-4.357 8.618 8.618 0 013.5-7.1 11.25 11.25 0 017.2-2.321z"
            />
            <Path
              data-name="Path 3490"
              d="M45.931 57.1l-2.417 27.658a6.6 6.6 0 01-2.865 4.784 9.811 9.811 0 01-6.086 1.989h-6.394l.285-3.173h6.014q2.368 0 2.6-2.794l.379-4.4h-2.084a9.53 9.53 0 01-6.014-1.8 5.912 5.912 0 01-2.274-5.493l1.184-13.592h-1.7l.284-3.173h8.051l-1.56 17.943q-.237 2.937 2.32 2.937h2.084L39.585 57.1z"
            />
            <Path
              data-name="Path 3491"
              d="M68.143 77.986l-.284 3.173h-2.226q-3.315 0-4.83-1.942a6.927 6.927 0 01-4.878 1.942h-.995a8.89 8.89 0 01-5.493-1.705 5.318 5.318 0 01-2.226-5.02l.9-10.608a6.649 6.649 0 013.125-5.02 10.179 10.179 0 015.778-1.705h10.94l-1.61 18.754q-.19 2.036 1.799 2.131zm-6.82-17.712h-4.547q-2.036 0-2.226 2.368l-1.042 12.171q-.284 3.173 2.7 3.173a3.745 3.745 0 002.6-1.042 3.807 3.807 0 001.278-2.51z"
            />
            <Path
              data-name="Path 3492"
              d="M87.56 57.1l-.616 6.583h-3.457l.237-3.126a7.851 7.851 0 00-3.694 2.936 8.89 8.89 0 00-1.705 4.5l-1.137 13.165h-6.346l1.846-20.885h-1.8l.284-3.173h8.1l-.142 2.037a9.557 9.557 0 016.3-2.037z"
            />
            <Path
              data-name="Path 3493"
              d="M101.482 57.1l-.285 3.172h-2.7l-1.326 15.013q-.237 2.416 1.942 2.652l-.284 3.22h-2.226a6.042 6.042 0 01-4.31-1.468 5.059 5.059 0 01-1.468-4.4l1.326-15.013h-2.51l.284-3.173h2.51l.473-5.588h6.346l-.521 5.588z"
            />
            <Path
              data-name="Path 3494"
              d="M124.688 57.1l-8.666 8.572a7.507 7.507 0 014.167 2.32 6.193 6.193 0 011.468 4.688l-.237 3.268q-.143 1.942 1.61 2.037l-.237 3.173h-2.178a7.165 7.165 0 01-3.93-.947 3.584 3.584 0 01-1.658-3.457l.284-4.073a5.491 5.491 0 00-.473-2.747 2.348 2.348 0 00-2.226-1.374 3.9 3.9 0 00-2.131.758l-1.042 11.839h-6.3l2.747-31.73h-1.8l.284-3.173h8.146l-1.61 18.281 7.483-7.435z"
            />
          </G>
          <G data-name="Group 2793">
            <Path
              data-name="Path 3519"
              d="M44.957 32.842l-.284 3.173H19.614a8.141 8.141 0 01-5.588-1.8 6.085 6.085 0 01-1.894-5.493l1.184-13.592h-1.658l.284-3.173h7.957l-1.468 17.57a3.879 3.879 0 00.5 2.32 1.935 1.935 0 001.776.995h16.012l1.847-20.885 5.555-.678-1.009 21.563z"
            />
            <Path
              data-name="Path 3520"
              d="M69.923 11.895l-2.091 24.71a6.6 6.6 0 01-2.865 4.783 9.809 9.809 0 01-6.085 1.989h-3.173l.284-3.173h3.173q1.989 0 2.226-2.794l1.9-22.342h-1.705l.284-3.173z"
            />
            <Path
              data-name="Path 3521"
              d="M87.486 43.488a3.18 3.18 0 01-.947 2.3 3.117 3.117 0 01-2.321.971 3.06 3.06 0 01-2.273-.971 3.175 3.175 0 01-.947-2.3 3.234 3.234 0 013.22-3.22 3.184 3.184 0 012.3.947 3.067 3.067 0 01.968 2.273z"
            />
            <Path
              data-name="Path 3522"
              d="M96.312 43.488a3.179 3.179 0 01-.946 2.3 3.118 3.118 0 01-2.321.971 3.061 3.061 0 01-2.273-.971 3.176 3.176 0 01-.947-2.3 3.234 3.234 0 013.22-3.22 3.182 3.182 0 012.3.947 3.065 3.065 0 01.967 2.273z"
            />
            <Path
              data-name="Path 3523"
              d="M55.025 3.22a3.179 3.179 0 01-.947 2.3 3.119 3.119 0 01-2.321.971 3.062 3.062 0 01-2.273-.971 3.175 3.175 0 01-.947-2.3A3.235 3.235 0 0151.757 0a3.182 3.182 0 012.3.947 3.064 3.064 0 01.968 2.273z"
            />
            <Path
              data-name="Path 3524"
              d="M63.851 3.22a3.18 3.18 0 01-.946 2.3 3.119 3.119 0 01-2.321.971 3.062 3.062 0 01-2.273-.971 3.175 3.175 0 01-.947-2.3A3.235 3.235 0 0160.584 0a3.182 3.182 0 012.3.947 3.066 3.066 0 01.967 2.273z"
            />
            <Path
              data-name="Path 3525"
              d="M83.302 1.135l-2.51 28.984q-.238 2.557 1.941 2.747l-.236 3.173h-1.042a8.1 8.1 0 01-5.351-1.586 4.769 4.769 0 01-1.657-4.334L76.72 4.308h-1.708l.284-3.173z"
            />
            <Path
              data-name="Path 3526"
              d="M128.721 12.824v2.419h-4.983v.924l-.911.426-1.075 11.54a5.016 5.016 0 01-1.753 3.339 5.181 5.181 0 01-3.552 1.4l1.847-20.932h-8.056l-.284 3.173h1.658l-1.8 20.932h6.346a11.846 11.846 0 008.264-3.433 12.362 12.362 0 004-8.075l1.016-11.713z"
            />
            <Path
              data-name="Path 3527"
              d="M117.424 11.933l-1.09 12.6a12.364 12.364 0 01-4 8.075 11.846 11.846 0 01-8.264 3.433h-6.346l1.8-20.932h-1.658l.284-3.173h8.051l-1.847 20.932a5.182 5.182 0 003.552-1.4 5.014 5.014 0 001.753-3.339l1.42-16.2z"
            />
            <Path
              data-name="Path 3528"
              d="M99.3 17.696l-.441 5.035a5.02 5.02 0 01-1.753 3.339 5.182 5.182 0 01-3.552 1.4L95.4 6.538h-8.05l-.284 3.173h1.657l-1.799 20.928h6.346a11.848 11.848 0 008.265-3.433 12.364 12.364 0 004-8.075l.124-1.435z"
            />
            <Path
              data-name="Path 3529"
              d="M94.236 19.617h-6.387l-1.412 16.421h6.346c.116-2.213.116-1.3.284-3.173z"
            />
            <Path
              data-name="Path 3530"
              d="M81.555 19.617h-6.39l-1.41 16.421h6.346c.116-2.213.116-1.3.284-3.173z"
            />
            <Path
              data-name="Path 3531"
              d="M87.768 36.038h-6.793l.754-3.173h6.039z"
            />
            <Path
              data-name="Path 3532"
              d="M45.75 1.135l-2.51 28.984q-.237 2.557 1.942 2.747l-.237 3.173h-1.037a8.1 8.1 0 01-5.356-1.586 4.769 4.769 0 01-1.657-4.334l2.273-25.811h-1.705l.284-3.173z"
            />
            <Path
              data-name="Path 3533"
              d="M49.344 30.702h6.362l1.656-18.769h-8.051l-.284 3.173h1.657z"
            />
            <Path
              data-name="Path 3534"
              d="M56.684 19.617h-6.387l-1.412 16.421h6.346c.116-2.213.116-1.3.284-3.173z"
            />
            <Path
              data-name="Path 3535"
              d="M50.216 36.038h-6.793l.754-3.173h6.039z"
            />
            <Path
              data-name="Path 3536"
              d="M128.811 20.288l.224-3.449q.076-1.452.642-1.838a3.361 3.361 0 011.658-.236l.2-3.243-2.873-.009a6.428 6.428 0 00-3.878 1.149 4.934 4.934 0 00-1.949 3.769l-.25 3.836z"
            />
            <G data-name="Group 2789">
              <Path
                data-name="Path 3537"
                d="M2.376 11.042v.55h-.865v2.318H.866v-2.318H.001v-.55z"
              />
              <Path
                data-name="Path 3538"
                d="M3.51 11.042q.074.137.172.337c.065.133.133.279.2.435s.14.315.209.478l.195.46.2-.46c.069-.162.139-.322.21-.477l.2-.435c.062-.135.123-.246.173-.337h.588c.027.19.053.4.076.639s.043.481.061.737.034.511.049.768.028.5.039.725h-.629c-.008-.279-.019-.583-.033-.911s-.034-.66-.061-.994l-.167.385-.181.422-.172.4c-.055.129-.1.238-.141.329h-.452c-.038-.092-.085-.2-.141-.329l-.172-.4c-.059-.137-.119-.282-.18-.422l-.166-.385q-.041.5-.063.994t-.033.911h-.629q.017-.339.039-.725t.05-.767a21.219 21.219 0 01.14-1.376z"
              />
            </G>
            <Path
              data-name="Path 3539"
              d="M29.258 24.217l.133-1.545h-.017l.259-2.961a1.426 1.426 0 01.506-.952 1.662 1.662 0 01.408-.274l-.319 3.615h3.511v-2.937a2.8 2.8 0 00-1.405-2.143 5.979 5.979 0 00-1.609-.93l-.129-.043-.135.022a5.269 5.269 0 00-2.811 1.427 5.416 5.416 0 00-1.743 3.525l-.276 3.194H21.55l-.2 2.355h13.31l.21-2.355z"
            />
          </G>
        </G>
      </Svg>
    );
  },
  logo(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={177.888}
        height={181.418}
        viewBox="0 0 177.888 181.418"
        {...props}
      >
        <Defs>
          <LinearGradient
            id="prefix__a"
            x1={-0.031}
            y1={0.832}
            x2={1.233}
            y2={0.042}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#0f62fb" />
            <Stop offset={0.996} stopColor="#0ed9de" />
          </LinearGradient>
          <LinearGradient
            id="prefix__d"
            x1={0.316}
            y1={-0.238}
            x2={0.875}
            y2={1.298}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#26a9e0" />
            <Stop offset={1} stopColor="#26a9e0" stopOpacity={0} />
          </LinearGradient>
          <LinearGradient
            id="prefix__e"
            x1={0.497}
            y1={-1.114}
            x2={0.503}
            y2={1.871}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#10465d" />
            <Stop offset={1} stopColor="#10465d" stopOpacity={0} />
          </LinearGradient>
          <LinearGradient
            id="prefix__f"
            x1={0.072}
            y1={0.903}
            x2={1.346}
            y2={-0.9}
            xlinkHref="#prefix__a"
          />
          <LinearGradient
            id="prefix__g"
            x1={-0.143}
            y1={1.615}
            x2={1.132}
            y2={-0.191}
            xlinkHref="#prefix__a"
          />
          <LinearGradient
            id="prefix__b"
            x1={0.235}
            y1={0.089}
            x2={0.456}
            y2={0.681}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#fff" />
            <Stop offset={1} stopColor="#fff" stopOpacity={0} />
          </LinearGradient>
          <LinearGradient
            id="prefix__h"
            x1={0.303}
            y1={-0.155}
            x2={0.439}
            y2={0.639}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__i"
            x1={1.012}
            y1={0.602}
            x2={0.41}
            y2={0.451}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__j"
            x1={0.356}
            y1={0.027}
            x2={0.439}
            y2={0.589}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__k"
            x1={0.384}
            y1={-0.09}
            x2={0.471}
            y2={0.353}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__l"
            x1={0.496}
            y1={-7.414}
            x2={0.508}
            y2={17.659}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__c"
            x1={0.5}
            y1={-0.05}
            x2={0.5}
            y2={1.234}
            gradientUnits="objectBoundingBox"
          >
            <Stop offset={0} stopColor="#083383" />
            <Stop offset={0.996} stopColor="#066366" stopOpacity={0} />
          </LinearGradient>
          <LinearGradient
            id="prefix__m"
            x1={1.073}
            y1={1.687}
            x2={0.229}
            y2={0.627}
            xlinkHref="#prefix__c"
          />
          <LinearGradient
            id="prefix__n"
            x1={-15.507}
            y1={21.354}
            x2={-14.947}
            y2={22.891}
            xlinkHref="#prefix__d"
          />
          <LinearGradient
            id="prefix__o"
            x1={-18.015}
            y1={70.146}
            x2={-18.01}
            y2={73.131}
            xlinkHref="#prefix__e"
          />
          <LinearGradient
            id="prefix__p"
            x1={-13.629}
            y1={4.67}
            x2={-13.409}
            y2={5.262}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__q"
            x1={-13.562}
            y1={4.425}
            x2={-13.426}
            y2={5.22}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__r"
            x1={-15.815}
            y1={5.85}
            x2={-15.732}
            y2={6.412}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__s"
            x1={-20.202}
            y1={5.657}
            x2={-20.115}
            y2={6.1}
            xlinkHref="#prefix__b"
          />
          <LinearGradient
            id="prefix__t"
            x1={0.874}
            y1={0.194}
            x2={0.593}
            y2={0.369}
            xlinkHref="#prefix__b"
          />
        </Defs>
        <G data-name="Group 2788">
          <G data-name="Group 2787">
            <Path
              data-name="Path 3495"
              d="M176.439 99.682a19.97 19.97 0 00-9.176-10.912L127.49 66.635h50.4L138.658 0l-78.53.158a31.354 31.354 0 00-26.67 14.968l-13.02 21.24L3.302 63.914a20.15 20.15 0 00-1.335 2.583l-.077.126h.027a20.869 20.869 0 008.879 26.008l39.408 21.933-50.206-.086 39.2 66.639 78.672.075a31.356 31.356 0 0026.761-14.968l13-21.2 17.127-27.537a20.073 20.073 0 001.335-2.582l.077-.126h-.027a20.021 20.021 0 00.296-15.097z"
              fill="#fff"
            />
            <G data-name="Group 2786">
              <G data-name="Group 2782">
                <Path
                  data-name="Path 3496"
                  d="M687.081 298.641a19.97 19.97 0 00-9.176-10.912l-133.28-74.177-30.679 49.322a20.822 20.822 0 007.494 28.716l133.28 74.178 30.68-49.322a20.008 20.008 0 001.681-17.805z"
                  fill="url(#prefix__a)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <G data-name="Group 2781">
                  <Path
                    data-name="Path 3497"
                    d="M638.132 265.594l-125.571-.012 155.96 16.925z"
                    fill="url(#prefix__d)"
                    style={{
                      mixBlendMode: 'multiply',
                      isolation: 'isolate',
                    }}
                    transform="translate(-510.642 -198.959)"
                  />
                  <Path
                    data-name="Path 3498"
                    d="M638.132 265.594l-125.571-.012 134.463 4.961z"
                    fill="url(#prefix__e)"
                    style={{
                      mixBlendMode: 'multiply',
                      isolation: 'isolate',
                    }}
                    transform="translate(-510.642 -198.959)"
                  />
                </G>
                <Path
                  data-name="Path 3499"
                  d="M549.842 380.076l-39.2-66.639 176.169.3-31.536 51.445a31.356 31.356 0 01-26.762 14.968z"
                  fill="url(#prefix__f)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3502"
                  d="M649.3 198.959l39.23 66.641-176-.016 31.568-51.5a31.354 31.354 0 0126.669-14.968z"
                  fill="url(#prefix__g)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3503"
                  d="M649.3 198.959l39.23 66.641-176-.016 31.568-51.5a31.354 31.354 0 0126.669-14.968z"
                  fill="url(#prefix__b)"
                  style={{
                    mixBlendMode: 'overlay',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3504"
                  d="M649.3 198.959l39.23 66.641-176-.016 31.568-51.5a31.354 31.354 0 0126.669-14.968z"
                  fill="url(#prefix__h)"
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3505"
                  d="M549.842 380.076l-39.2-66.639 176.169.3-31.536 51.445a31.356 31.356 0 01-26.762 14.968z"
                  fill="url(#prefix__i)"
                  style={{
                    mixBlendMode: 'overlay',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Line 48"
                  fill="none"
                  stroke="#707070"
                  strokeMiterlimit={10}
                  strokeWidth={2.507}
                  style={{
                    mixBlendMode: 'overlay',
                    isolation: 'isolate',
                  }}
                  d="M48.064 114.56l128.105.219"
                />
                <Path
                  data-name="Path 3506"
                  d="M525.224 258.478L550.16 217.8a24.091 24.091 0 0120.626-11.574l74.458-.152 30.856 52.419z"
                  opacity={0.5}
                  fill="url(#prefix__j)"
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3507"
                  d="M556.114 225.278A24.09 24.09 0 01576.74 213.7l68.5-7.632-74.458.152a24.091 24.091 0 00-20.622 11.58l-24.936 40.68v.853z"
                  fill="url(#prefix__k)"
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3508"
                  d="M681.031 265.35c-4.772-.1-11.589-.357-19.77-.474s-17.726-.351-27.952-.4l-32.042-.185-32.043.146c-10.226.042-19.771.267-27.952.365s-15 .35-19.771.448l-7.5.238 2.832.093 171.692.016z"
                  fill="url(#prefix__l)"
                  style={{
                    mixBlendMode: 'overlay',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
              </G>
              <G data-name="Group 2783" opacity={0.2}>
                <Path
                  data-name="Path 3509"
                  d="M654.72 365.768l13.552-21.787 18.462-30.117c.018-.042.032-.084.05-.126l-125.936-.215z"
                  fill="url(#prefix__c)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3510"
                  d="M544.625 213.552l-13.543 21.773-18.471 30.131c-.018.042-.032.084-.05.126l125.571.012z"
                  fill="url(#prefix__m)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
              </G>
              <G data-name="Group 2784">
                <Path
                  data-name="Path 3511"
                  d="M560.927 313.511l125.571.012-155.96-16.923z"
                  fill="url(#prefix__n)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3512"
                  d="M560.927 313.511l125.571.012-134.463-4.961z"
                  fill="url(#prefix__o)"
                  style={{
                    mixBlendMode: 'multiply',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
              </G>
              <G data-name="Group 2785">
                <Path
                  data-name="Path 3513"
                  d="M549.958 380.377l-39.229-66.639 176 .016-31.569 51.5a31.352 31.352 0 01-26.668 14.967z"
                  fill="url(#prefix__p)"
                  style={{
                    mixBlendMode: 'overlay',
                    isolation: 'isolate',
                  }}
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3514"
                  d="M549.958 380.377l-39.229-66.639 176 .016-31.569 51.5a31.352 31.352 0 01-26.668 14.967z"
                  opacity={0.6}
                  fill="url(#prefix__q)"
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3515"
                  d="M674.035 320.858l-24.935 40.68a24.092 24.092 0 01-20.626 11.574l-74.458.152-30.858-52.42z"
                  opacity={0.5}
                  fill="url(#prefix__r)"
                  transform="translate(-510.642 -198.959)"
                />
                <Path
                  data-name="Path 3516"
                  d="M643.145 354.058a24.088 24.088 0 01-20.626 11.574l-68.5 7.632 74.458-.152a24.092 24.092 0 0020.623-11.574l24.936-40.68v-.853z"
                  fill="url(#prefix__s)"
                  transform="translate(-510.642 -198.959)"
                />
              </G>
              <Path
                data-name="Path 3517"
                d="M687.081 298.641a19.97 19.97 0 00-9.176-10.912l-133.28-74.177 131.351 76a20.822 20.822 0 017.495 28.717l-29.34 47.168.589.328 30.68-49.319a20.008 20.008 0 001.681-17.805z"
                opacity={0.4}
                fill="url(#prefix__t)"
                style={{
                  mixBlendMode: 'overlay',
                  isolation: 'isolate',
                }}
                transform="translate(-510.642 -198.959)"
              />
            </G>
          </G>
          <Path
            data-name="Path 3540"
            d="M556.114 225.278A24.09 24.09 0 01576.74 213.7l68.5-7.632-74.458.152a24.091 24.091 0 00-20.622 11.58l-24.936 40.68v.853z"
            transform="rotate(180 344.413 191.722)"
            fill="url(#prefix__k)"
          />
        </G>
      </Svg>
    );
  },

  masterCard(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg viewBox="0 0 504 504" {...props}>
        <Path
          d="M504 252c0 83.2-67.2 151.2-151.2 151.2-83.2 0-151.2-68-151.2-151.2 0-83.2 67.2-151.2 150.4-151.2 84.8 0 152 68 152 151.2z"
          fill="#ffb600"
        />
        <Path
          d="M352.8 100.8c83.2 0 151.2 68 151.2 151.2 0 83.2-67.2 151.2-151.2 151.2-83.2 0-151.2-68-151.2-151.2"
          fill="#f7981d"
        />
        <Path
          d="M352.8 100.8c83.2 0 151.2 68 151.2 151.2 0 83.2-67.2 151.2-151.2 151.2"
          fill="#ff8500"
        />
        <Path
          d="M149.6 100.8C67.2 101.6 0 168.8 0 252s67.2 151.2 151.2 151.2c39.2 0 74.4-15.2 101.6-39.2 5.6-4.8 10.4-10.4 15.2-16h-31.2c-4-4.8-8-10.4-11.2-15.2h53.6c3.2-4.8 6.4-10.4 8.8-16h-71.2c-2.4-4.8-4.8-10.4-6.4-16h83.2c4.8-15.2 8-31.2 8-48 0-11.2-1.6-21.6-3.2-32h-92.8c.8-5.6 2.4-10.4 4-16h83.2c-1.6-5.6-4-11.2-6.4-16H216c2.4-5.6 5.6-10.4 8.8-16h53.6c-3.2-5.6-7.2-11.2-12-16h-29.6c4.8-5.6 9.6-10.4 15.2-15.2-26.4-24.8-62.4-39.2-101.6-39.2 0-1.6 0-1.6-.8-1.6z"
          fill="#ff5050"
        />
        <Path
          d="M0 252c0 83.2 67.2 151.2 151.2 151.2 39.2 0 74.4-15.2 101.6-39.2 5.6-4.8 10.4-10.4 15.2-16h-31.2c-4-4.8-8-10.4-11.2-15.2h53.6c3.2-4.8 6.4-10.4 8.8-16h-71.2c-2.4-4.8-4.8-10.4-6.4-16h83.2c4.8-15.2 8-31.2 8-48 0-11.2-1.6-21.6-3.2-32h-92.8c.8-5.6 2.4-10.4 4-16h83.2c-1.6-5.6-4-11.2-6.4-16H216c2.4-5.6 5.6-10.4 8.8-16h53.6c-3.2-5.6-7.2-11.2-12-16h-29.6c4.8-5.6 9.6-10.4 15.2-15.2-26.4-24.8-62.4-39.2-101.6-39.2h-.8"
          fill="#e52836"
        />
        <Path
          d="M151.2 403.2c39.2 0 74.4-15.2 101.6-39.2 5.6-4.8 10.4-10.4 15.2-16h-31.2c-4-4.8-8-10.4-11.2-15.2h53.6c3.2-4.8 6.4-10.4 8.8-16h-71.2c-2.4-4.8-4.8-10.4-6.4-16h83.2c4.8-15.2 8-31.2 8-48 0-11.2-1.6-21.6-3.2-32h-92.8c.8-5.6 2.4-10.4 4-16h83.2c-1.6-5.6-4-11.2-6.4-16H216c2.4-5.6 5.6-10.4 8.8-16h53.6c-3.2-5.6-7.2-11.2-12-16h-29.6c4.8-5.6 9.6-10.4 15.2-15.2-26.4-24.8-62.4-39.2-101.6-39.2h-.8"
          fill="#cb2026"
        />
        <G fill="#fff">
          <Path d="M204.8 290.4l2.4-13.6c-.8 0-2.4.8-4 .8-5.6 0-6.4-3.2-5.6-4.8l4.8-28h8.8l2.4-15.2h-8l1.6-9.6h-16s-9.6 52.8-9.6 59.2c0 9.6 5.6 13.6 12.8 13.6 4.8 0 8.8-1.6 10.4-2.4zM210.4 264.8c0 22.4 15.2 28 28 28 12 0 16.8-2.4 16.8-2.4l3.2-15.2s-8.8 4-16.8 4c-17.6 0-14.4-12.8-14.4-12.8H260s2.4-10.4 2.4-14.4c0-10.4-5.6-23.2-23.2-23.2-16.8-1.6-28.8 16-28.8 36zm28-23.2c8.8 0 7.2 10.4 7.2 11.2H228c0-.8 1.6-11.2 10.4-11.2zM340 290.4l3.2-17.6s-8 4-13.6 4c-11.2 0-16-8.8-16-18.4 0-19.2 9.6-29.6 20.8-29.6 8 0 14.4 4.8 14.4 4.8l2.4-16.8s-9.6-4-18.4-4c-18.4 0-36.8 16-36.8 46.4 0 20 9.6 33.6 28.8 33.6 6.4 0 15.2-2.4 15.2-2.4zM116.8 227.2c-11.2 0-19.2 3.2-19.2 3.2L95.2 244s7.2-3.2 17.6-3.2c5.6 0 10.4.8 10.4 5.6 0 3.2-.8 4-.8 4h-7.2c-13.6 0-28.8 5.6-28.8 24 0 14.4 9.6 17.6 15.2 17.6 11.2 0 16-7.2 16.8-7.2l-.8 6.4H132l6.4-44c0-19.2-16-20-21.6-20zm3.2 36c0 2.4-1.6 15.2-11.2 15.2-4.8 0-6.4-4-6.4-6.4 0-4 2.4-9.6 14.4-9.6 2.4.8 3.2.8 3.2.8zM153.6 292c4 0 24 .8 24-20.8 0-20-19.2-16-19.2-24 0-4 3.2-5.6 8.8-5.6 2.4 0 11.2.8 11.2.8l2.4-14.4s-5.6-1.6-15.2-1.6c-12 0-24 4.8-24 20.8 0 18.4 20 16.8 20 24 0 4.8-5.6 5.6-9.6 5.6-7.2 0-14.4-2.4-14.4-2.4l-2.4 14.4c.8 1.6 4.8 3.2 18.4 3.2zM472.8 214.4l-3.2 21.6s-6.4-8-15.2-8c-14.4 0-27.2 17.6-27.2 38.4 0 12.8 6.4 26.4 20 26.4 9.6 0 15.2-6.4 15.2-6.4l-.8 5.6h16l12-76.8-16.8-.8zm-7.2 42.4c0 8.8-4 20-12.8 20-5.6 0-8.8-4.8-8.8-12.8 0-12.8 5.6-20.8 12.8-20.8 5.6 0 8.8 4 8.8 13.6zM29.6 291.2l9.6-57.6 1.6 57.6H52l20.8-57.6-8.8 57.6h16.8l12.8-76.8H67.2l-16 47.2-.8-47.2H27.2l-12.8 76.8h15.2zM277.6 291.2c4.8-26.4 5.6-48 16.8-44 1.6-10.4 4-14.4 5.6-18.4h-3.2c-7.2 0-12.8 9.6-12.8 9.6l1.6-8.8h-15.2L260 292h17.6v-.8zM376.8 227.2c-11.2 0-19.2 3.2-19.2 3.2l-2.4 13.6s7.2-3.2 17.6-3.2c5.6 0 10.4.8 10.4 5.6 0 3.2-.8 4-.8 4h-7.2c-13.6 0-28.8 5.6-28.8 24 0 14.4 9.6 17.6 15.2 17.6 11.2 0 16-7.2 16.8-7.2l-.8 6.4H392l6.4-44c.8-19.2-16-20-21.6-20zm4 36c0 2.4-1.6 15.2-11.2 15.2-4.8 0-6.4-4-6.4-6.4 0-4 2.4-9.6 14.4-9.6 2.4.8 2.4.8 3.2.8zM412 291.2c4.8-26.4 5.6-48 16.8-44 1.6-10.4 4-14.4 5.6-18.4h-3.2c-7.2 0-12.8 9.6-12.8 9.6l1.6-8.8h-15.2L394.4 292H412v-.8z" />
        </G>
        <G fill="#dce5e5">
          <Path d="M180 279.2c0 9.6 5.6 13.6 12.8 13.6 5.6 0 10.4-1.6 12-2.4l2.4-13.6c-.8 0-2.4.8-4 .8-5.6 0-6.4-3.2-5.6-4.8l4.8-28h8.8l2.4-15.2h-8l1.6-9.6M218.4 264.8c0 22.4 7.2 28 20 28 12 0 16.8-2.4 16.8-2.4l3.2-15.2s-8.8 4-16.8 4c-17.6 0-14.4-12.8-14.4-12.8H260s2.4-10.4 2.4-14.4c0-10.4-5.6-23.2-23.2-23.2-16.8-1.6-20.8 16-20.8 36zm20-23.2c8.8 0 10.4 10.4 10.4 11.2H228c0-.8 1.6-11.2 10.4-11.2zM340 290.4l3.2-17.6s-8 4-13.6 4c-11.2 0-16-8.8-16-18.4 0-19.2 9.6-29.6 20.8-29.6 8 0 14.4 4.8 14.4 4.8l2.4-16.8s-9.6-4-18.4-4c-18.4 0-28.8 16-28.8 46.4 0 20 1.6 33.6 20.8 33.6 6.4 0 15.2-2.4 15.2-2.4zM95.2 244.8s7.2-3.2 17.6-3.2c5.6 0 10.4.8 10.4 5.6 0 3.2-.8 4-.8 4h-7.2c-13.6 0-28.8 5.6-28.8 24 0 14.4 9.6 17.6 15.2 17.6 11.2 0 16-7.2 16.8-7.2l-.8 6.4H132l6.4-44c0-18.4-16-19.2-22.4-19.2m12 34.4c0 2.4-9.6 15.2-19.2 15.2-4.8 0-6.4-4-6.4-6.4 0-4 2.4-9.6 14.4-9.6 2.4.8 11.2.8 11.2.8zM136 290.4s4.8 1.6 18.4 1.6c4 0 24 .8 24-20.8 0-20-19.2-16-19.2-24 0-4 3.2-5.6 8.8-5.6 2.4 0 11.2.8 11.2.8l2.4-14.4s-5.6-1.6-15.2-1.6c-12 0-16 4.8-16 20.8 0 18.4 12 16.8 12 24 0 4.8-5.6 5.6-9.6 5.6M469.6 236s-6.4-8-15.2-8c-14.4 0-19.2 17.6-19.2 38.4 0 12.8-1.6 26.4 12 26.4 9.6 0 15.2-6.4 15.2-6.4l-.8 5.6h16l12-76.8m-20.8 41.6c0 8.8-7.2 20-16 20-5.6 0-8.8-4.8-8.8-12.8 0-12.8 5.6-20.8 12.8-20.8 5.6 0 12 4 12 13.6zM29.6 291.2l9.6-57.6 1.6 57.6H52l20.8-57.6-8.8 57.6h16.8l12.8-76.8h-20l-22.4 47.2-.8-47.2h-8.8l-27.2 76.8h15.2zM260.8 291.2h16.8c4.8-26.4 5.6-48 16.8-44 1.6-10.4 4-14.4 5.6-18.4h-3.2c-7.2 0-12.8 9.6-12.8 9.6l1.6-8.8M355.2 244.8s7.2-3.2 17.6-3.2c5.6 0 10.4.8 10.4 5.6 0 3.2-.8 4-.8 4h-7.2c-13.6 0-28.8 5.6-28.8 24 0 14.4 9.6 17.6 15.2 17.6 11.2 0 16-7.2 16.8-7.2l-.8 6.4H392l6.4-44c0-18.4-16-19.2-22.4-19.2m12 34.4c0 2.4-9.6 15.2-19.2 15.2-4.8 0-6.4-4-6.4-6.4 0-4 2.4-9.6 14.4-9.6 3.2.8 11.2.8 11.2.8zM395.2 291.2H412c4.8-26.4 5.6-48 16.8-44 1.6-10.4 4-14.4 5.6-18.4h-3.2c-7.2 0-12.8 9.6-12.8 9.6l1.6-8.8" />
        </G>
      </Svg>
    );
  },
  imagePlaceholder(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={24.596} height={19.13} viewBox="0 0 24.596 19.13" {...props}>
        <Path
          d="M23.034-.001H1.562A1.562 1.562 0 000 1.562v16.007a1.562 1.562 0 001.562 1.562h21.472a1.562 1.562 0 001.566-1.562V1.562a1.562 1.562 0 00-1.566-1.563zm0 1.562v11.358l-3.078-2.8a1.171 1.171 0 00-1.616.039l-3.115 3.114-6.14-7.334A1.171 1.171 0 007.3 5.926l-5.738 6.668V1.562zm-6.637 4.1a2.147 2.147 0 112.147 2.147A2.147 2.147 0 0116.4 5.661z"
          fill="#b5b5b5"
        />
      </Svg>
    );
  },

  car2(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={15.893}
        height={12.361}
        viewBox="0 0 15.893 12.361"
        {...props}
      >
        <Defs></Defs>
        <Path d="M15.15 4.631l-.34-.36-1.193-3.215a1.4 1.4 0 00-1.3-.906H3.792a1.394 1.394 0 00-1.3.906L1.313 4.231l-.49.453A1.914 1.914 0 00.15 6.14v4.684a1.393 1.393 0 001.393 1.386h.88a1.393 1.393 0 001.393-1.386v-.674h8.263v.68a1.393 1.393 0 001.393 1.386h.88a1.393 1.393 0 001.393-1.386V6.017a1.932 1.932 0 00-.595-1.386zM3.115 1.283a.721.721 0 01.676-.466h8.523a.725.725 0 01.676.466l1.04 2.8h-.78a2.285 2.285 0 00-4.521 0H2.076zm9.459 2.8H9.406a1.618 1.618 0 013.168 0zM3.15 10.825a.724.724 0 01-.726.72h-.88a.724.724 0 01-.726-.72V9.95a1.353 1.353 0 00.725.2H3.15zm11.928 0a.724.724 0 01-.726.72h-.88a.727.727 0 01-.726-.72v-.675h1.604a1.353 1.353 0 00.726-.193v.873zm-.728-1.346H1.543a.719.719 0 01-.726-.713V6.14a1.251 1.251 0 01.443-.953l.013-.013.453-.426h12.617l.32.343c0 .007.013.01.017.017a1.256 1.256 0 01.393.91v2.749a.721.721 0 01-.723.712z" />
        <Path d="M4.548 6.081h-2.5a.334.334 0 00-.333.333v1.732a.334.334 0 00.333.333h2.5a.334.334 0 00.333-.333V6.414a.334.334 0 00-.333-.333zm-.333 1.733H2.382V6.748h1.834zM13.843 6.081h-2.5a.334.334 0 00-.333.333v1.732a.334.334 0 00.333.333h2.5a.334.334 0 00.333-.333V6.414a.334.334 0 00-.333-.333zm-.333 1.733h-1.832V6.748h1.833zM9.556 7.48H6.338a.333.333 0 100 .666h3.218a.333.333 0 100-.666zM9.556 6.447H6.338a.333.333 0 000 .666h3.218a.333.333 0 100-.666z" />
      </Svg>
    );
  },
  user2(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={11.882}
        height={15.057}
        viewBox="0 0 11.882 15.057"
        {...props}
      >
        <Defs></Defs>
        <Path d="M5.943 0A3.787 3.787 0 109.73 3.787 3.792 3.792 0 005.943 0zm0 6.461a2.673 2.673 0 112.673-2.673 2.677 2.677 0 01-2.673 2.673zM5.941 8.911A5.981 5.981 0 000 15.056h1.114a4.831 4.831 0 119.654 0h1.114a5.981 5.981 0 00-5.941-6.145z" />
      </Svg>
    );
  },
  payment(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={19.186}
        height={19.186}
        viewBox="0 0 19.186 19.186"
        {...props}
      >
        <Defs></Defs>
        <Path d="M13.55 3.47l-.33-1.427a1.31 1.31 0 00-1.569-.98L1.454 3.417a1.31 1.31 0 00-.98 1.568l1.295 5.609a1.306 1.306 0 001.434.997l1.532 2.266a1.308 1.308 0 001.817.35l5.453-3.681a3.782 3.782 0 001.073 3.198l.2.2.572 2.476a.262.262 0 00.314.197l4.588-1.06a.262.262 0 00.197-.314l-1.944-8.418a3.424 3.424 0 00-1.516-2.124zm.351 1.524l1.238 1.832a.785.785 0 01-.211 1.09l-.403.272a1.308 1.308 0 00-.01-.534zM2.28 10.476L.984 4.868a.785.785 0 01.588-.942L11.77 1.572a.785.785 0 01.941.589l.374 1.62.002.006.92 3.982a.8.8 0 01.012.137L11.14 6.107a1.4 1.4 0 00-1.528 2.334l1.25.86-7.642 1.764a.785.785 0 01-.941-.589zm3.56.52l-1.651 1.117-.43-.636zm.42 2.778a.785.785 0 01-1.09-.21l-.691-1.018 2.773-1.872 4.19-.967.414.285zm12.119 1.307l-4.079.941-.47-2.037 4.079-.942zm-.588-2.55l-4.19.968-.151-.15a3.262 3.262 0 01-.818-3.251.262.262 0 00-.102-.292L9.91 8.012a.873.873 0 01.956-1.46l5 3.124.277-.444-1.162-.728.238-.158a1.308 1.308 0 00.35-1.815L14.19 4.49l1.017.637a2.9 2.9 0 011.288 1.797zm0 0" />
        <Path d="M3.91 6.608a.68.68 0 00.509-.815l-.283-1.224a.68.68 0 00-.815-.51l-1.224.283a.68.68 0 00-.51.815l.283 1.224a.68.68 0 00.816.51zm-1.53-.344l-.083-.357.51-.118-.118-.51-.51.118-.082-.357a.157.157 0 01.118-.188l1.224-.283a.157.157 0 01.188.118l.082.356-.51.118.118.51.51-.118.082.356a.157.157 0 01-.118.189l-1.223.282a.157.157 0 01-.188-.116zm0 0M2.455 7.75l1.02-.235.117.51-1.02.235zm0 0M2.808 9.28l1.02-.236.117.51-1.02.235zm0 0M7.396 8.22l1.02-.235.117.51-1.019.235zm0 0M3.985 7.398l1.019-.236.118.51-1.02.235zm0 0M5.515 7.044l1.019-.235.117.51-1.019.235zm0 0M7.043 6.691l1.02-.235.117.51-1.019.235zm0 0M11.18 2.514l.51-.118.177.765-.51.118zm0 0M10.161 2.749l.51-.118.177.765-.51.118zm0 0M9.141 2.985l.51-.118.176.765-.51.117zm0 0M8.122 3.22l.51-.118.176.765-.51.118zm0 0M14.456 14.377l.51-.118.117.51-.51.118zm0 0" />
      </Svg>
    );
  },
  darkLinkedin(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={26.536}
        height={26.536}
        viewBox="0 0 26.536 26.536"
        {...props}
      >
        <Path
          d="M24.622 0H1.914A1.914 1.914 0 000 1.914v22.708a1.914 1.914 0 001.914 1.914h22.708a1.914 1.914 0 001.914-1.914V1.914A1.914 1.914 0 0024.622 0zM9.412 20.057H6.181v-9.721h3.231zM7.8 9.008h-.024a1.684 1.684 0 11.043-3.359A1.685 1.685 0 117.8 9.008zm13.264 11.049h-3.231v-5.2c0-1.307-.468-2.2-1.637-2.2a1.769 1.769 0 00-1.658 1.182 2.213 2.213 0 00-.106.789v5.429H11.2s.042-8.809 0-9.721h3.231v1.376a3.208 3.208 0 012.912-1.6c2.126 0 3.72 1.389 3.72 4.375zm0 0"
          fill="#989898"
        />
      </Svg>
    );
  },
  darkYoutube(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={37.899}
        height={26.536}
        viewBox="0 0 37.899 26.536"
        {...props}
      >
        <Path
          d="M37.119 4.152a4.748 4.748 0 00-3.34-3.341C30.813 0 18.95 0 18.95 0S7.087 0 4.121.781A4.844 4.844 0 00.78 4.152C0 7.118 0 13.268 0 13.268s0 6.181.78 9.114a4.749 4.749 0 003.34 3.34c3 .812 14.829.812 14.829.812s11.863 0 14.829-.781a4.748 4.748 0 003.341-3.34c.78-2.966.78-9.116.78-9.116s.031-6.179-.78-9.145zm-21.946 14.8V7.582l9.865 5.682zm0 0"
          fill="#989898"
        />
      </Svg>
    );
  },
  darkInstagram(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={26.531}
        height={26.536}
        viewBox="0 0 26.531 26.536"
        {...props}
      >
        <Defs></Defs>
        <Path d="M26.463 7.8a9.7 9.7 0 00-.612-3.218A6.8 6.8 0 0021.964.7a9.721 9.721 0 00-3.219-.617C17.324.016 16.873 0 13.271 0S9.217.016 7.802.078a9.7 9.7 0 00-3.219.617 6.475 6.475 0 00-2.354 1.534A6.533 6.533 0 00.7 4.577 9.722 9.722 0 00.083 7.8C.016 9.217 0 9.668 0 13.27s.016 4.054.078 5.469a9.7 9.7 0 00.617 3.219 6.8 6.8 0 003.883 3.883 9.722 9.722 0 003.219.617c1.415.062 1.866.078 5.469.078s4.054-.015 5.469-.078a9.694 9.694 0 003.219-.617 6.787 6.787 0 003.883-3.883 9.729 9.729 0 00.617-3.219c.062-1.415.078-1.866.078-5.469s-.006-4.053-.069-5.47zm-2.39 10.834a7.273 7.273 0 01-.456 2.462 4.4 4.4 0 01-2.519 2.519 7.3 7.3 0 01-2.462.456c-1.4.062-1.819.078-5.36.078s-3.966-.015-5.36-.078a7.27 7.27 0 01-2.465-.454 4.083 4.083 0 01-1.524-.99 4.125 4.125 0 01-.99-1.524 7.3 7.3 0 01-.456-2.462c-.062-1.4-.078-1.82-.078-5.36s.015-3.966.078-5.36a7.269 7.269 0 01.456-2.462 4.033 4.033 0 011-1.524 4.119 4.119 0 011.524-.99 7.3 7.3 0 012.46-.457c1.4-.062 1.82-.078 5.36-.078s3.966.016 5.36.078a7.273 7.273 0 012.462.456 4.08 4.08 0 011.524.99 4.125 4.125 0 01.99 1.524 7.3 7.3 0 01.456 2.462c.062 1.4.078 1.819.078 5.36s-.015 3.956-.077 5.356zm0 0" />
        <Path d="M13.271 6.454a6.817 6.817 0 106.817 6.817 6.818 6.818 0 00-6.817-6.817zm0 11.238a4.422 4.422 0 114.422-4.422 4.422 4.422 0 01-4.422 4.422zm0 0M21.948 6.184a1.591 1.591 0 11-1.592-1.591 1.592 1.592 0 011.592 1.591zm0 0" />
      </Svg>
    );
  },
  darkTwitter(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={32.659}
        height={26.536}
        viewBox="0 0 32.659 26.536"
        {...props}
      >
        <Path
          d="M32.659 3.141A13.959 13.959 0 0128.8 4.2 6.658 6.658 0 0031.745.5 13.381 13.381 0 0127.5 2.119 6.695 6.695 0 0015.919 6.7a6.894 6.894 0 00.155 1.527 18.951 18.951 0 01-13.8-7 6.7 6.7 0 002.058 8.949 6.612 6.612 0 01-3.025-.825v.073A6.726 6.726 0 006.671 16a6.682 6.682 0 01-1.755.22 5.92 5.92 0 01-1.268-.12A6.759 6.759 0 009.9 20.767a13.453 13.453 0 01-8.3 2.856 12.543 12.543 0 01-1.6-.092 18.849 18.849 0 0010.271 3c12.321 0 19.057-10.206 19.057-19.053 0-.3-.01-.582-.024-.865a13.357 13.357 0 003.355-3.472z"
          fill="#989898"
        />
      </Svg>
    );
  },
  darkFacebook(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={26.536}
        height={26.536}
        viewBox="0 0 26.536 26.536"
        {...props}
      >
        <Path
          d="M25.071 0H1.463A1.464 1.464 0 000 1.465v23.607a1.464 1.464 0 001.465 1.463h12.71V16.274h-3.447v-4.017h3.447V9.3c0-3.428 2.093-5.294 5.151-5.294a28.355 28.355 0 013.09.158v3.584h-2.109c-1.664 0-1.986.791-1.986 1.951v2.558H22.3l-.518 4.017h-3.461v10.262h6.75a1.464 1.464 0 001.465-1.464V1.463A1.464 1.464 0 0025.071 0zm0 0"
          fill="#989898"
        />
      </Svg>
    );
  },
  shop2(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={30.158}
        height={26.331}
        viewBox="0 0 30.158 26.331"
        {...props}
      >
        <Defs></Defs>
        <Path d="M21.426 14.34h-4.1a2.036 2.036 0 00-2.034 2.034v3.143a2.036 2.036 0 002.034 2.034h4.1a2.036 2.036 0 002.034-2.034v-3.143a2.036 2.036 0 00-2.034-2.034zm.555 5.176a.556.556 0 01-.555.555h-4.1a.556.556 0 01-.555-.555v-3.143a.556.556 0 01.555-.555h4.1a.556.556 0 01.555.555z" />
        <Path d="M30.158 8.627a.686.686 0 00-.1-.364L25.572.375a.743.743 0 00-.641-.376H5.219a.731.731 0 00-.641.376L.1 8.264a.748.748 0 00-.1.364 4.326 4.326 0 002.588 3.956v13.008a.742.742 0 00.739.739h23.5a.742.742 0 00.739-.739V12.676a.326.326 0 00-.006-.08 4.338 4.338 0 002.598-3.969zM5.651 1.485H24.5l3.508 6.165H2.151zm15.812 7.641a2.842 2.842 0 01-5.6 0zm-7.167 0a2.846 2.846 0 01-5.6 0zm-12.768 0h5.6a2.846 2.846 0 01-5.6 0zM12.423 24.85H8.171v-7.98a1.053 1.053 0 011.054-1.054h2.151a1.053 1.053 0 011.054 1.054v7.98zm13.662 0H13.9v-7.98a2.537 2.537 0 00-2.533-2.533H9.219a2.537 2.537 0 00-2.533 2.533v7.986H4.067V12.95c.086.006.173.006.259.006a4.32 4.32 0 003.586-1.91 4.322 4.322 0 007.173 0 4.31 4.31 0 007.161 0 4.32 4.32 0 003.586 1.904h.253v11.9zm-.253-13.378a2.841 2.841 0 01-2.8-2.342h5.6a2.858 2.858 0 01-2.8 2.344z" />
      </Svg>
    );
  },
  heart(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg width={32.8} height={27.682} viewBox="0 0 32.8 27.682" {...props}>
        <Path
          d="M16.375 26.713l.05.064c13.747-5.549 19.044-18.414 12.99-23.963s-12.99 2.017-12.99 2.017h-.05S9.438-2.736 3.385 2.814s-.757 18.349 12.99 23.899z"
          fill="none"
          stroke={props.fill || '#277ef5'}
          strokeWidth={1.5}
        />
        <Path
          d="M3.592 9.349a6.052 6.052 0 00.326 1.942.609.609 0 00.588.415.6.6 0 00.2-.027.619.619 0 00.387-.787 4.836 4.836 0 01-.268-1.544 5.049 5.049 0 012.744-4.45 5.427 5.427 0 012.582-.649.616.616 0 100-1.232 6.658 6.658 0 00-3.164.787 6.289 6.289 0 00-3.395 5.545z"
          fill={props.fill || '#277ef5'}
        />
      </Svg>
    );
  },
  car(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg viewBox="0 0 468 468" {...props}>
        <Path d="M450.1 187.5l-10.2-10.8-35.8-96.5C398 63.9 382.4 53.1 365 53H109.3c-17.4 0-33 10.9-39.1 27.2l-35.3 95.3-14.7 13.6C7.4 200 0 216 0 232.8v140.6c.1 23 18.8 41.6 41.8 41.6h26.4c23 0 41.7-18.6 41.8-41.6V353h248v20.4c.1 23 18.8 41.6 41.8 41.6h26.4c23 0 41.7-18.6 41.8-41.6V229.1c-.1-15.7-6.5-30.7-17.9-41.6zM89 87c3.2-8.5 11.3-14 20.3-14h255.8c9 0 17.1 5.6 20.3 14l31.2 84h-23.3c-5.5-37.5-40.4-63.4-77.9-57.8-29.9 4.4-53.4 27.9-57.8 57.8H57.8L89 87zm283.9 84h-95.1c5.5-26.3 31.3-43.1 57.6-37.6 18.8 4 33.5 18.7 37.5 37.6zM90 373.4c-.1 12-9.8 21.6-21.8 21.6H41.8c-12 0-21.7-9.6-21.8-21.6v-26.2c6 3.9 13.9 5.8 21.8 5.8H90v20.4zm358 0c-.1 12-9.8 21.6-21.8 21.6h-26.4c-12 0-21.7-9.7-21.8-21.6V353h48.2c7.9 0 15.8-1.9 21.8-5.8v26.2zM426.2 333H41.8c-11.9.1-21.7-9.4-21.8-21.4v-78.8c0-11 4.9-21.5 13.3-28.6l.4-.4L47.3 191H426l9.6 10.3c.1.2.4.3.5.5 7.5 7.1 11.8 17 11.8 27.3v82.5h.1c-.1 11.9-9.9 21.5-21.8 21.4z" />
        <Path d="M132 231H57c-5.5 0-10 4.5-10 10v52c0 5.5 4.5 10 10 10h75c5.5 0 10-4.5 10-10v-52c0-5.5-4.5-10-10-10zm-10 52H67v-32h55v32zM411 231h-75c-5.5 0-10 4.5-10 10v52c0 5.5 4.5 10 10 10h75c5.5 0 10-4.5 10-10v-52c0-5.5-4.5-10-10-10zm-10 52h-55v-32h55v32zM282.3 273h-96.6c-5.5 0-10 4.5-10 10s4.5 10 10 10h96.6c5.5 0 10-4.5 10-10s-4.5-10-10-10zM282.3 242h-96.6c-5.5 0-10 4.5-10 10s4.5 10 10 10h96.6c5.5 0 10-4.5 10-10s-4.5-10-10-10z" />
      </Svg>
    );
  },
  logout(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={19.696}
        height={21.888}
        viewBox="0 0 19.696 21.888"
        {...props}
      >
        <Defs></Defs>
        <Path d="M9.848 21.888A9.849 9.849 0 017.236 2.542a.821.821 0 01.434 1.58 8.207 8.207 0 104.534.051.821.821 0 11.47-1.572 9.849 9.849 0 01-2.827 19.284zm0 0" />
        <Path d="M9.848 10.669a.82.82 0 01-.821-.821V.821a.821.821 0 111.641 0v9.027a.82.82 0 01-.82.821zm0 0" />
      </Svg>
    );
  },
  settings(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={20.666}
        height={20.666}
        viewBox="0 0 20.666 20.666"
        {...props}
      >
        <Defs></Defs>
        <Path d="M10.982 20.666h-1.3a1.9 1.9 0 01-1.9-1.9v-.439a8.343 8.343 0 01-1.3-.538l-.311.311a1.9 1.9 0 01-2.691 0l-.917-.917a1.9 1.9 0 010-2.691l.311-.311a8.344 8.344 0 01-.538-1.3H1.9a1.9 1.9 0 01-1.9-1.9v-1.3a1.9 1.9 0 011.9-1.9h.439a8.345 8.345 0 01.538-1.3l-.311-.311a1.9 1.9 0 010-2.691l.917-.917a1.9 1.9 0 012.691 0l.311.311a8.351 8.351 0 011.3-.538V1.9a1.9 1.9 0 011.9-1.9h1.3a1.9 1.9 0 011.9 1.9v.439a8.343 8.343 0 011.3.538l.311-.311a1.9 1.9 0 012.691 0l.917.917a1.9 1.9 0 010 2.691l-.311.311a8.344 8.344 0 01.538 1.3h.439a1.9 1.9 0 011.9 1.9v1.3a1.9 1.9 0 01-1.9 1.9h-.439a8.345 8.345 0 01-.538 1.3l.311.311a1.9 1.9 0 010 2.691l-.917.917a1.9 1.9 0 01-2.691 0l-.311-.311a8.351 8.351 0 01-1.3.538v.439a1.9 1.9 0 01-1.903 1.896zm-4.293-4.151a7.137 7.137 0 001.85.768.605.605 0 01.454.586v.894a.692.692 0 00.692.692h1.3a.692.692 0 00.692-.692v-.893a.605.605 0 01.454-.586 7.137 7.137 0 001.85-.768.605.605 0 01.736.093l.633.633a.691.691 0 00.978 0l.917-.917a.691.691 0 000-.978l-.634-.634a.605.605 0 01-.093-.736 7.135 7.135 0 00.768-1.85.605.605 0 01.586-.454h.894a.692.692 0 00.692-.692v-1.3a.692.692 0 00-.692-.692h-.896a.605.605 0 01-.586-.454 7.137 7.137 0 00-.768-1.85.605.605 0 01.093-.736l.633-.633a.691.691 0 000-.978l-.917-.917a.691.691 0 00-.978 0l-.633.634a.605.605 0 01-.736.093 7.137 7.137 0 00-1.85-.768.605.605 0 01-.454-.586V1.9a.692.692 0 00-.692-.692h-1.3a.692.692 0 00-.692.692v.9a.605.605 0 01-.454.586 7.137 7.137 0 00-1.85.768.606.606 0 01-.736-.093l-.633-.633a.691.691 0 00-.978 0l-.917.917a.691.691 0 000 .978l.634.634a.605.605 0 01.093.736 7.135 7.135 0 00-.768 1.85.605.605 0 01-.586.454H1.9a.692.692 0 00-.692.692v1.3a.692.692 0 00.692.692h.9a.605.605 0 01.586.454 7.137 7.137 0 00.768 1.85.605.605 0 01-.093.736l-.633.633a.691.691 0 000 .978l.917.917a.691.691 0 00.978 0l.633-.634a.608.608 0 01.736-.093z" />
        <Path d="M10.337 14.83a4.5 4.5 0 114.5-4.5 4.5 4.5 0 01-4.5 4.5zm0-7.782a3.286 3.286 0 103.286 3.286 3.289 3.289 0 00-3.286-3.286z" />
      </Svg>
    );
  },
  termsAndCondation(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={21.37} height={22.305} viewBox="0 0 21.37 22.305" {...props}>
        <Defs></Defs>
        <Path d="M14.126 4.297h3.9a.653.653 0 110 1.307h-3.9a.653.653 0 110-1.307zm0 0M14.126 6.911h3.9a.653.653 0 010 1.307h-3.9a.653.653 0 010-1.307zm0 0M14.126 9.526h3.9a.653.653 0 110 1.307h-3.9a.653.653 0 110-1.307zm0 0M14.126 12.139h3.9a.653.653 0 110 1.307h-3.9a.653.653 0 010-1.307zm0 0M14.126 14.797h3.9a.653.653 0 110 1.307h-3.9a.653.653 0 110-1.307zm0 0M11.932 5.604h-3.9a.653.653 0 010-1.307h3.9a.653.653 0 110 1.307zm0 0M11.932 8.218h-3.9a.653.653 0 010-1.307h3.9a.653.653 0 110 1.307zm0 0M9.4 10.181a.653.653 0 01.653-.653h1.878a.653.653 0 110 1.307h-1.877a.653.653 0 01-.654-.654zm0 0M7.645 15.073a.653.653 0 00-.919.1l-1.683 2.1-1.042-.755a.653.653 0 10-.767 1.058l1.546 1.12a.653.653 0 00.893-.12l2.073-2.583a.653.653 0 00-.101-.92zm0 0" />
        <Path d="M1.557 13.067a5.389 5.389 0 013.13-1.573V2.632A2.635 2.635 0 017.319 0h11.419a2.635 2.635 0 012.632 2.632v15.137a2.635 2.635 0 01-2.632 2.631H9.554a5.379 5.379 0 01-4.127 1.9 5.431 5.431 0 01-3.87-9.238zm18.506 4.7V2.632a1.326 1.326 0 00-1.325-1.325H7.319a1.326 1.326 0 00-1.325 1.325v8.841a5.434 5.434 0 014.387 7.621h8.357a1.326 1.326 0 001.325-1.325zM5.427 21a4.124 4.124 0 000-8.248h-.074A4.124 4.124 0 005.427 21zm0 0" />
      </Svg>
    );
  },
  info(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={18.459}
        height={18.459}
        viewBox="0 0 18.459 18.459"
        {...props}
      >
        <Defs></Defs>
        <Path d="M9.23 0a9.23 9.23 0 109.23 9.23A9.224 9.224 0 009.23 0zm0 17.017a7.787 7.787 0 117.787-7.787 7.783 7.783 0 01-7.787 7.787z" />
        <Path d="M9.229 4.646a.721.721 0 00-.721.721v4.643a.721.721 0 101.442 0V5.369a.721.721 0 00-.721-.723z" />
        <Circle
          cx={0.973}
          cy={0.973}
          r={0.973}
          transform="translate(8.256 11.615)"
        />
      </Svg>
    );
  },

  phone(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        style={props.scale && { transform: [{ scaleX: -1 }] }}
        width={20.666}
        height={20.667}
        viewBox="0 0 20.666 20.667"
        {...props}
      >
        <Path
          d="M20.134 15.243l-2.569-2.569a1.819 1.819 0 00-2.569 0l-1.168 1.168a1.378 1.378 0 01-1.946 0L6.82 8.776a1.376 1.376 0 010-1.946l1.169-1.168a1.816 1.816 0 000-2.57L5.419.531a1.818 1.818 0 00-2.567 0l-.936.928a6.558 6.558 0 000 9.265l8.02 8.024a6.547 6.547 0 009.265 0l.934-.934a1.819 1.819 0 00-.001-2.571zM3.706 1.388a.606.606 0 01.857 0l2.569 2.56a.605.605 0 010 .856l-.428.428L3.28 1.81zm7.083 16.502L2.772 9.866a5.324 5.324 0 01-.334-7.185l3.413 3.413a2.585 2.585 0 00.112 3.538l5.062 5.068a2.585 2.585 0 003.538.113l3.414 3.414a5.314 5.314 0 01-7.188-.337zm8.486-.934l-.428.428-3.426-3.426.428-.428a.606.606 0 01.856 0l2.573 2.57a.606.606 0 010 .856z"
          fill={props.fill || '#fff'}
        />
      </Svg>
    );
  },
  whatsapp(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg height="512pt" viewBox="-1 0 512 512" width="512pt" {...props}>
        <Path
          d="M10.895 512A10.895 10.895 0 01.387 498.23l33.285-121.546C12.949 339.21 2.023 296.82 2.039 253.789 2.098 113.848 115.98 0 255.91 0c67.871.027 131.645 26.465 179.578 74.434 47.926 47.972 74.309 111.742 74.29 179.558-.063 139.945-113.946 253.801-253.868 253.801h-.11c-40.87-.016-81.39-9.977-117.468-28.844L13.656 511.645c-.914.238-1.843.355-2.761.355zm0 0"
          fill="#e5e5e5"
        />
        <Path
          d="M10.895 501.105l34.468-125.87c-21.261-36.84-32.445-78.63-32.43-121.442C12.989 119.859 121.98 10.895 255.91 10.895c64.992.027 125.996 25.324 171.871 71.238 45.871 45.914 71.125 106.945 71.102 171.855-.059 133.93-109.067 242.91-242.973 242.91-.008 0 .004 0 0 0h-.105c-40.664-.015-80.618-10.214-116.106-29.57zm134.77-77.75l7.378 4.372c31 18.398 66.543 28.128 102.789 28.148h.078c111.305 0 201.899-90.578 201.945-201.902.02-53.95-20.964-104.68-59.093-142.84-38.133-38.16-88.832-59.188-142.778-59.211C144.59 51.922 54 142.488 53.957 253.809c-.016 38.148 10.656 75.296 30.875 107.445l4.805 7.64-20.407 74.5zm0 0"
          fill="#fff"
        />
        <Path
          d="M19.344 492.625l33.277-121.52c-20.531-35.562-31.324-75.91-31.312-117.234.05-129.297 105.273-234.488 234.558-234.488 62.75.027 121.645 24.449 165.922 68.773 44.29 44.324 68.664 103.242 68.64 165.899-.054 129.3-105.28 234.504-234.55 234.504-.012 0 .004 0 0 0h-.106c-39.253-.016-77.828-9.868-112.085-28.54zm0 0"
          fill="#64b161"
        />
        <G fill="#fff">
          <Path d="M10.895 501.105l34.468-125.87c-21.261-36.84-32.445-78.63-32.43-121.442C12.989 119.859 121.98 10.895 255.91 10.895c64.992.027 125.996 25.324 171.871 71.238 45.871 45.914 71.125 106.945 71.102 171.855-.059 133.93-109.067 242.91-242.973 242.91-.008 0 .004 0 0 0h-.105c-40.664-.015-80.618-10.214-116.106-29.57zm134.77-77.75l7.378 4.372c31 18.398 66.543 28.128 102.789 28.148h.078c111.305 0 201.899-90.578 201.945-201.902.02-53.95-20.964-104.68-59.093-142.84-38.133-38.16-88.832-59.188-142.778-59.211C144.59 51.922 54 142.488 53.957 253.809c-.016 38.148 10.656 75.296 30.875 107.445l4.805 7.64-20.407 74.5zm0 0" />
          <Path
            d="M195.184 152.246c-4.547-10.11-9.336-10.312-13.664-10.488-3.54-.153-7.59-.145-11.633-.145-4.047 0-10.625 1.524-16.188 7.598-5.566 6.074-21.254 20.762-21.254 50.633 0 29.875 21.758 58.738 24.793 62.793 3.035 4.05 42 67.308 103.707 91.644 51.285 20.227 61.72 16.203 72.852 15.192 11.133-1.012 35.918-14.688 40.976-28.864 5.063-14.175 5.063-26.324 3.543-28.867-1.52-2.527-5.566-4.047-11.636-7.082-6.07-3.035-35.918-17.726-41.485-19.75-5.566-2.027-9.613-3.035-13.66 3.043-4.05 6.07-15.676 19.742-19.219 23.79-3.543 4.058-7.086 4.566-13.156 1.527-6.07-3.043-25.625-9.45-48.82-30.133-18.047-16.09-30.235-35.965-33.777-42.043-3.54-6.07-.06-9.07 2.667-12.387 4.91-5.973 13.149-16.71 15.172-20.758 2.024-4.054 1.012-7.597-.504-10.637-1.52-3.035-13.32-33.058-18.714-45.066zm0 0"
            fillRule="evenodd"
          />
        </G>
      </Svg>
    );
  },
  clock(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={12.467}
        height={12.467}
        viewBox="0 0 12.467 12.467"
        {...props}
      >
        <Defs></Defs>
        <Path d="M6.234 0a6.234 6.234 0 106.234 6.234A6.234 6.234 0 006.234 0zm0 11.577a5.343 5.343 0 115.343-5.343 5.343 5.343 0 01-5.343 5.343z" />
        <Path d="M6.233 2.226a.445.445 0 00-.445.445v3.122H2.671a.445.445 0 100 .891h3.562a.445.445 0 00.445-.445V2.671a.445.445 0 00-.445-.445z" />
      </Svg>
    );
  },
  eye(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg viewBox="0 0 511.999 511.999" {...props}>
        <Path d="M508.745 246.041c-4.574-6.257-113.557-153.206-252.748-153.206S7.818 239.784 3.249 246.035a16.896 16.896 0 000 19.923c4.569 6.257 113.557 153.206 252.748 153.206s248.174-146.95 252.748-153.201a16.875 16.875 0 000-19.922zM255.997 385.406c-102.529 0-191.33-97.533-217.617-129.418 26.253-31.913 114.868-129.395 217.617-129.395 102.524 0 191.319 97.516 217.617 129.418-26.253 31.912-114.868 129.395-217.617 129.395z" />
        <Path d="M255.997 154.725c-55.842 0-101.275 45.433-101.275 101.275s45.433 101.275 101.275 101.275S357.272 311.842 357.272 256s-45.433-101.275-101.275-101.275zm0 168.791c-37.23 0-67.516-30.287-67.516-67.516s30.287-67.516 67.516-67.516 67.516 30.287 67.516 67.516-30.286 67.516-67.516 67.516z" />
      </Svg>
    );
  },
  activeStar(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={22.7} height={21.698} viewBox="0 0 22.7 21.698" {...props}>
        <G data-name="Group 186">
          <Path
            data-name="Path 79"
            d="M10.752.87a.666.666 0 011.195 0l2.6 5.265a1.678 1.678 0 001.263.918l5.81.845a.666.666 0 01.369 1.136l-4.2 4.1a1.678 1.678 0 00-.482 1.485l.992 5.786a.666.666 0 01-.967.7L12.13 18.37a1.678 1.678 0 00-1.561 0l-5.2 2.732a.666.666 0 01-.967-.7l.992-5.786a1.678 1.678 0 00-.482-1.485l-4.2-4.1a.666.666 0 01.369-1.136l5.81-.845a1.678 1.678 0 001.263-.918z"
            fill="#ffc400"
            stroke="#fff"
          />
        </G>
      </Svg>
    );
  },
  star(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg width={22.7} height={21.698} viewBox="0 0 22.7 21.698" {...props}>
        <Path
          d="M10.752.87a.666.666 0 011.195 0l2.6 5.265a1.678 1.678 0 001.263.918l5.81.845a.666.666 0 01.369 1.136l-4.2 4.1a1.678 1.678 0 00-.482 1.485l.992 5.786a.666.666 0 01-.967.7L12.13 18.37a1.678 1.678 0 00-1.561 0l-5.2 2.732a.666.666 0 01-.967-.7l.992-5.786a1.678 1.678 0 00-.482-1.485l-4.2-4.1a.666.666 0 01.369-1.136l5.81-.845a1.678 1.678 0 001.263-.918z"
          fill="none"
          stroke={props.fill || '#fff'}
        />
      </Svg>
    );
  },
  share(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg
        width={18.087}
        height={19.542}
        viewBox="0 0 18.087 19.542"
        {...props}
      >
        <Path
          d="M14.401 12.168a3.68 3.68 0 00-2.837 1.332l-4.4-2.5a3.679 3.679 0 000-2.463l4.4-2.5a3.683 3.683 0 10-.638-1.121l-4.4 2.5a3.687 3.687 0 100 4.7l4.4 2.5a3.686 3.686 0 103.475-2.456zm0-10.878a2.4 2.4 0 11-2.4 2.4 2.4 2.4 0 012.4-2.4zM3.687 12.168a2.4 2.4 0 112.4-2.4 2.4 2.4 0 01-2.4 2.4zM14.4 18.252a2.4 2.4 0 112.4-2.4 2.4 2.4 0 01-2.399 2.4z"
          fill={props.fill || '#fff'}
        />
      </Svg>
    );
  },

  arrowBack(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg width={8.429} height={14.347} viewBox="0 0 8.429 14.347" {...props}>
        <Path
          d="M.229 7.733l6.385 6.385a.786.786 0 001.11 0l.47-.471a.786.786 0 000-1.11l-5.365-5.36L8.2 1.809a.787.787 0 000-1.11l-.47-.47a.787.787 0 00-1.11 0L.229 6.62a.792.792 0 000 1.114z"
          fill={props.fill || '#fff'}
        />
      </Svg>
    );
  },
  user(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg
        width={22.746}
        height={22.746}
        viewBox="0 0 22.746 22.746"
        {...props}
      >
        <Path
          d="M22.689 19.491a.889.889 0 00-1.74.362.928.928 0 01-.188.778.9.9 0 01-.711.338H2.7a.9.9 0 01-.711-.338.928.928 0 01-.188-.778 9.817 9.817 0 019.34-7.774h.472a9.775 9.775 0 017.887 4.339.889.889 0 101.476-.99 11.558 11.558 0 00-5.989-4.55 6.042 6.042 0 10-7.232 0 11.557 11.557 0 00-7.7 8.61A2.7 2.7 0 002.7 22.746h17.35a2.7 2.7 0 002.639-3.255zM7.109 6.042a4.265 4.265 0 114.481 4.26h-.431a4.27 4.27 0 01-4.05-4.26z"
          fill={props.fill || '#b5b5b5'}
        />
      </Svg>
    );
  },
  shop(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg
        width={22.746}
        height={22.746}
        viewBox="0 0 22.746 22.746"
        {...props}
      >
        <Path
          d="M21.858 0H.889A.889.889 0 000 .889v20.969a.889.889 0 00.889.889h20.969a.889.889 0 00.889-.889V.889A.889.889 0 0021.858 0zm-7.064 20.969H7.952v-6.841h6.842zm6.175 0h-4.4v-7.73a.889.889 0 00-.889-.889H7.064a.889.889 0 00-.889.889v7.73h-4.4V9.27a3.5 3.5 0 004.354-.719 3.5 3.5 0 005.242 0 3.5 3.5 0 005.242 0 3.5 3.5 0 004.354.719zm0-14.75a1.733 1.733 0 11-3.465 0 .889.889 0 10-1.777 0 1.733 1.733 0 11-3.465 0 .889.889 0 10-1.777 0 1.733 1.733 0 11-3.465 0 .889.889 0 10-1.777 0 1.733 1.733 0 11-3.465 0V1.777h19.191z"
          fill={props.fill || '#b5b5b5'}
        />
      </Svg>
    );
  },
  add(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={22.746}
        height={22.746}
        viewBox="0 0 22.746 22.746"
        {...props}
      >
        <Defs></Defs>
        <Path d="M11.373 0a11.373 11.373 0 1011.373 11.373A11.386 11.386 0 0011.373 0zm0 20.984a9.611 9.611 0 119.611-9.611 9.623 9.623 0 01-9.611 9.611z" />
        <Path d="M15.778 10.413h-3.524V6.889a.881.881 0 10-1.762 0v3.524H6.965a.881.881 0 100 1.762h3.524v3.524a.881.881 0 001.762 0V12.17h3.524a.881.881 0 100-1.762z" />
      </Svg>
    );
  },
  search(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={23.034}
        height={23.034}
        viewBox="0 0 23.034 23.034"
        {...props}
      >
        <Defs></Defs>
        <Path d="M6.359 5.243a.851.851 0 00-1.2 0 5.816 5.816 0 00-1.663 4.714.851.851 0 00.846.766h.085a.851.851 0 00.762-.932 4.12 4.12 0 011.173-3.342.851.851 0 00-.003-1.206z" />
        <Path d="M9.73 0a9.73 9.73 0 109.73 9.73A9.741 9.741 0 009.73 0zm0 17.758a8.028 8.028 0 118.028-8.028 8.037 8.037 0 01-8.028 8.028z" />
        <Path d="M22.785 21.582l-6.184-6.184a.851.851 0 10-1.2 1.2l6.184 6.184a.851.851 0 001.2-1.2z" />
      </Svg>
    );
  },
  racing(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={27} height={23.034} viewBox="0 0 27 23.034" {...props}>
        <Defs></Defs>
        <Path d="M15.483 0H4.84a.875.875 0 000 1.75h4.548A11.6 11.6 0 006.82 3.936H.875a.875.875 0 000 1.75h4.68a11.494 11.494 0 00.529 12.48H3.6a.875.875 0 000 1.75h4.01a11.59 11.59 0 001.777 1.369H.965a.875.875 0 100 1.75h14.518a11.517 11.517 0 100-23.034zm0 21.285a9.768 9.768 0 119.768-9.768 9.779 9.779 0 01-9.768 9.768z" />
        <Path d="M15.483 4.372a7.143 7.143 0 00-4.252 12.886.948.948 0 00.109.08 7.131 7.131 0 008.28 0l.06-.04a.948.948 0 00.049-.04A7.143 7.143 0 0015.48 4.372zm.875 1.821a5.411 5.411 0 013.918 2.847l-2.265.736a3.082 3.082 0 00-1.652-1.2V6.194zm.446 5.324a1.321 1.321 0 11-1.321-1.321 1.322 1.322 0 011.321 1.321zm-2.2-5.324v2.382a3.082 3.082 0 00-1.652 1.2l-2.265-.736a5.411 5.411 0 013.921-2.846zm-2.961 9.115a5.393 5.393 0 01-1.5-4.6l2.266.736v.077a3.054 3.054 0 00.634 1.865zm3.836 1.6a5.361 5.361 0 01-2.421-.575l1.4-1.926a3.062 3.062 0 002.044 0l1.4 1.926a5.363 5.363 0 01-2.419.58zm3.835-1.6l-1.4-1.926a3.054 3.054 0 00.634-1.865v-.077l2.266-.736a5.393 5.393 0 01-1.5 4.6z" />
      </Svg>
    );
  },
  location(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg width={8.738} height={11.378} viewBox="0 0 8.738 11.378" {...props}>
        <Defs></Defs>
        <Path d="M4.369.15A4.224 4.224 0 00.15 4.369c0 1.5.457 2.1 2.652 5 .381.5.813 1.072 1.307 1.731a.325.325 0 00.519 0c.491-.655.921-1.223 1.3-1.723 2.2-2.9 2.659-3.507 2.659-5.006A4.224 4.224 0 004.369.15zm1.043 8.833c-.312.411-.657.867-1.043 1.38-.389-.516-.736-.975-1.05-1.388C1.183 6.16.799 5.652.799 4.369a3.57 3.57 0 017.14 0c0 1.281-.389 1.79-2.526 4.614z" />
        <Path d="M4.369 2.097a2.272 2.272 0 102.272 2.272 2.274 2.274 0 00-2.272-2.272zm0 3.895a1.623 1.623 0 111.623-1.623 1.625 1.625 0 01-1.623 1.623z" />
      </Svg>
    );
  },
  listLayout(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={13.772}
        height={13.051}
        viewBox="0 0 13.772 13.051"
        {...props}
      >
        <Defs></Defs>
        <Path d="M1.835 0A1.835 1.835 0 103.67 1.835 1.837 1.837 0 001.835 0zm0 2.855a1.02 1.02 0 111.02-1.02 1.021 1.021 0 01-1.02 1.02zM1.835 4.69A1.835 1.835 0 103.67 6.525 1.837 1.837 0 001.835 4.69zm0 2.855a1.02 1.02 0 111.02-1.02 1.021 1.021 0 01-1.02 1.02zM1.835 9.38a1.835 1.835 0 101.835 1.835A1.837 1.837 0 001.835 9.38zm0 2.855a1.02 1.02 0 111.02-1.02 1.021 1.021 0 01-1.02 1.02zM6.476 3.67h5.31a1.919 1.919 0 001.99-1.835A1.919 1.919 0 0011.786 0h-5.31a1.919 1.919 0 00-1.99 1.835 1.919 1.919 0 001.99 1.835zm0-2.855h5.31a1.066 1.066 0 011.105 1.02 1.066 1.066 0 01-1.105 1.02h-5.31a1.066 1.066 0 01-1.105-1.02A1.066 1.066 0 016.476.816zM11.786 4.69h-5.31a1.841 1.841 0 100 3.67h5.31a1.841 1.841 0 100-3.67zm0 2.855h-5.31a1.023 1.023 0 110-2.039h5.31a1.023 1.023 0 110 2.039zM11.786 9.38h-5.31a1.841 1.841 0 100 3.67h5.31a1.841 1.841 0 100-3.67zm0 2.855h-5.31a1.023 1.023 0 110-2.039h5.31a1.023 1.023 0 110 2.039z" />
      </Svg>
    );
  },
  smallLayout(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg width={13} height={13} viewBox="0 0 13 13" {...props}>
        <G fill="#fff" stroke={props.fill || '#277ef5'}>
          <G data-name="Rectangle 9">
            <Rect width={13} height={6} rx={2} stroke="none" />
            <Rect x={0.5} y={0.5} width={12} height={5} rx={1.5} fill="none" />
          </G>
          <G data-name="Rectangle 10" transform="translate(0 7)">
            <Rect width={13} height={6} rx={2} stroke="none" />
            <Rect x={0.5} y={0.5} width={12} height={5} rx={1.5} fill="none" />
          </G>
        </G>
      </Svg>
    );
  },

  lowAndHigh(
    props: React.JSX.IntrinsicAttributes &
      React.JSX.IntrinsicClassAttributes<Svg> &
      Pick<
        Readonly<SvgProps>,
        | 'pointerEvents'
        | 'filter'
        | 'color'
        | 'fill'
        | 'style'
        | 'title'
        | 'clipPath'
        | 'marker'
        | 'mask'
        | 'children'
        | 'hitSlop'
        | 'id'
        | 'needsOffscreenAlphaCompositing'
        | 'onLayout'
        | 'removeClippedSubviews'
        | 'testID'
        | 'nativeID'
        | 'collapsable'
        | 'collapsableChildren'
        | 'onBlur'
        | 'onFocus'
        | 'renderToHardwareTextureAndroid'
        | 'focusable'
        | 'tabIndex'
        | 'shouldRasterizeIOS'
        | 'isTVSelectable'
        | 'hasTVPreferredFocus'
        | 'tvParallaxShiftDistanceX'
        | 'tvParallaxShiftDistanceY'
        | 'tvParallaxTiltAngle'
        | 'tvParallaxMagnification'
        | 'onStartShouldSetResponder'
        | 'onMoveShouldSetResponder'
        | 'onResponderEnd'
        | 'onResponderGrant'
        | 'onResponderReject'
        | 'onResponderMove'
        | 'onResponderRelease'
        | 'onResponderStart'
        | 'onResponderTerminationRequest'
        | 'onResponderTerminate'
        | 'onStartShouldSetResponderCapture'
        | 'onMoveShouldSetResponderCapture'
        | 'onTouchStart'
        | 'onTouchMove'
        | 'onTouchEnd'
        | 'onTouchCancel'
        | 'onTouchEndCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'accessible'
        | 'accessibilityActions'
        | 'accessibilityLabel'
        | 'aria-label'
        | 'accessibilityRole'
        | 'accessibilityState'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-disabled'
        | 'aria-expanded'
        | 'aria-selected'
        | 'accessibilityHint'
        | 'accessibilityValue'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'onAccessibilityAction'
        | 'importantForAccessibility'
        | 'aria-hidden'
        | 'aria-modal'
        | 'role'
        | 'accessibilityLabelledBy'
        | 'aria-labelledby'
        | 'accessibilityLiveRegion'
        | 'aria-live'
        | 'screenReaderFocusable'
        | 'accessibilityElementsHidden'
        | 'accessibilityViewIsModal'
        | 'onAccessibilityEscape'
        | 'onAccessibilityTap'
        | 'onMagicTap'
        | 'accessibilityIgnoresInvertColors'
        | 'accessibilityLanguage'
        | 'accessibilityShowsLargeContentViewer'
        | 'accessibilityLargeContentTitle'
        | 'accessibilityRespondsToUserInteraction'
        | 'width'
        | 'height'
        | 'viewBox'
        | 'opacity'
        | 'fillOpacity'
        | 'fillRule'
        | 'stroke'
        | 'strokeWidth'
        | 'strokeOpacity'
        | 'strokeDasharray'
        | 'strokeDashoffset'
        | 'strokeLinecap'
        | 'strokeLinejoin'
        | 'strokeMiterlimit'
        | 'vectorEffect'
        | 'clipRule'
        | 'translate'
        | 'translateX'
        | 'translateY'
        | 'origin'
        | 'originX'
        | 'originY'
        | 'scale'
        | 'scaleX'
        | 'scaleY'
        | 'skew'
        | 'skewX'
        | 'skewY'
        | 'rotation'
        | 'x'
        | 'y'
        | 'transform'
        | 'disabled'
        | 'onPress'
        | 'onPressIn'
        | 'onPressOut'
        | 'onLongPress'
        | 'delayPressIn'
        | 'delayPressOut'
        | 'delayLongPress'
        | 'markerStart'
        | 'markerMid'
        | 'markerEnd'
        | 'font'
        | 'fontStyle'
        | 'fontVariant'
        | 'fontWeight'
        | 'fontStretch'
        | 'fontSize'
        | 'fontFamily'
        | 'textAnchor'
        | 'textDecoration'
        | 'letterSpacing'
        | 'wordSpacing'
        | 'kerning'
        | 'fontFeatureSettings'
        | 'fontVariantLigatures'
        | 'fontVariationSettings'
      > & { readonly preserveAspectRatio?: string | undefined } & {},
  ) {
    return (
      <Svg
        width={13.343}
        height={13.343}
        viewBox="0 0 13.343 13.343"
        {...props}
      >
        <Defs></Defs>
        <Path d="M13.181 3.439L9.903.161a.547.547 0 00-.776 0L5.852 3.439a.549.549 0 10.776.776l2.333-2.333v9.606a.555.555 0 001.111 0V1.882l2.333 2.333a.549.549 0 10.776-.776zM7.491 9.127a.547.547 0 00-.776 0L4.382 11.46V1.854a.555.555 0 10-1.111 0v9.606L.938 9.127a.549.549 0 10-.776.776l3.278 3.278a.547.547 0 00.776 0l3.278-3.282a.55.55 0 000-.776z" />
      </Svg>
    );
  },
  notification(
    props:
      | any[]
      | (React.JSX.IntrinsicAttributes &
          React.JSX.IntrinsicClassAttributes<Svg> &
          Pick<
            Readonly<SvgProps>,
            | 'pointerEvents'
            | 'filter'
            | 'color'
            | 'fill'
            | 'style'
            | 'title'
            | 'clipPath'
            | 'marker'
            | 'mask'
            | 'children'
            | 'hitSlop'
            | 'id'
            | 'needsOffscreenAlphaCompositing'
            | 'onLayout'
            | 'removeClippedSubviews'
            | 'testID'
            | 'nativeID'
            | 'collapsable'
            | 'collapsableChildren'
            | 'onBlur'
            | 'onFocus'
            | 'renderToHardwareTextureAndroid'
            | 'focusable'
            | 'tabIndex'
            | 'shouldRasterizeIOS'
            | 'isTVSelectable'
            | 'hasTVPreferredFocus'
            | 'tvParallaxShiftDistanceX'
            | 'tvParallaxShiftDistanceY'
            | 'tvParallaxTiltAngle'
            | 'tvParallaxMagnification'
            | 'onStartShouldSetResponder'
            | 'onMoveShouldSetResponder'
            | 'onResponderEnd'
            | 'onResponderGrant'
            | 'onResponderReject'
            | 'onResponderMove'
            | 'onResponderRelease'
            | 'onResponderStart'
            | 'onResponderTerminationRequest'
            | 'onResponderTerminate'
            | 'onStartShouldSetResponderCapture'
            | 'onMoveShouldSetResponderCapture'
            | 'onTouchStart'
            | 'onTouchMove'
            | 'onTouchEnd'
            | 'onTouchCancel'
            | 'onTouchEndCapture'
            | 'onPointerEnter'
            | 'onPointerEnterCapture'
            | 'onPointerLeave'
            | 'onPointerLeaveCapture'
            | 'onPointerMove'
            | 'onPointerMoveCapture'
            | 'onPointerCancel'
            | 'onPointerCancelCapture'
            | 'onPointerDown'
            | 'onPointerDownCapture'
            | 'onPointerUp'
            | 'onPointerUpCapture'
            | 'accessible'
            | 'accessibilityActions'
            | 'accessibilityLabel'
            | 'aria-label'
            | 'accessibilityRole'
            | 'accessibilityState'
            | 'aria-busy'
            | 'aria-checked'
            | 'aria-disabled'
            | 'aria-expanded'
            | 'aria-selected'
            | 'accessibilityHint'
            | 'accessibilityValue'
            | 'aria-valuemax'
            | 'aria-valuemin'
            | 'aria-valuenow'
            | 'aria-valuetext'
            | 'onAccessibilityAction'
            | 'importantForAccessibility'
            | 'aria-hidden'
            | 'aria-modal'
            | 'role'
            | 'accessibilityLabelledBy'
            | 'aria-labelledby'
            | 'accessibilityLiveRegion'
            | 'aria-live'
            | 'screenReaderFocusable'
            | 'accessibilityElementsHidden'
            | 'accessibilityViewIsModal'
            | 'onAccessibilityEscape'
            | 'onAccessibilityTap'
            | 'onMagicTap'
            | 'accessibilityIgnoresInvertColors'
            | 'accessibilityLanguage'
            | 'accessibilityShowsLargeContentViewer'
            | 'accessibilityLargeContentTitle'
            | 'accessibilityRespondsToUserInteraction'
            | 'width'
            | 'height'
            | 'viewBox'
            | 'opacity'
            | 'fillOpacity'
            | 'fillRule'
            | 'stroke'
            | 'strokeWidth'
            | 'strokeOpacity'
            | 'strokeDasharray'
            | 'strokeDashoffset'
            | 'strokeLinecap'
            | 'strokeLinejoin'
            | 'strokeMiterlimit'
            | 'vectorEffect'
            | 'clipRule'
            | 'translate'
            | 'translateX'
            | 'translateY'
            | 'origin'
            | 'originX'
            | 'originY'
            | 'scale'
            | 'scaleX'
            | 'scaleY'
            | 'skew'
            | 'skewX'
            | 'skewY'
            | 'rotation'
            | 'x'
            | 'y'
            | 'transform'
            | 'disabled'
            | 'onPress'
            | 'onPressIn'
            | 'onPressOut'
            | 'onLongPress'
            | 'delayPressIn'
            | 'delayPressOut'
            | 'delayLongPress'
            | 'markerStart'
            | 'markerMid'
            | 'markerEnd'
            | 'font'
            | 'fontStyle'
            | 'fontVariant'
            | 'fontWeight'
            | 'fontStretch'
            | 'fontSize'
            | 'fontFamily'
            | 'textAnchor'
            | 'textDecoration'
            | 'letterSpacing'
            | 'wordSpacing'
            | 'kerning'
            | 'fontFeatureSettings'
            | 'fontVariantLigatures'
            | 'fontVariationSettings'
          > & { readonly preserveAspectRatio?: string | undefined } & {}),
  ) {
    return (
      <Svg width={17.408} height={22} viewBox="0 0 17.408 22" {...props}>
        <Path
          d="M17.049 17.508a3.418 3.418 0 01-1.039-1.414 16.367 16.367 0 01-1.083-6.467v-.025a6.242 6.242 0 00-3.675-5.662V2.451A2.452 2.452 0 008.806 0h-.2a2.452 2.452 0 00-2.45 2.451V3.94a6.242 6.242 0 00-3.675 5.686 16.367 16.367 0 01-1.083 6.467 3.418 3.418 0 01-1.039 1.414.627.627 0 00-.344.713.656.656 0 00.646.5h4.725a3.318 3.318 0 006.636 0h4.724a.656.656 0 00.646-.5.627.627 0 00-.343-.712zm-9.6-15.057a1.16 1.16 0 011.158-1.16h.2a1.16 1.16 0 011.159 1.16v1.07a6.242 6.242 0 00-2.518 0v-1.07zm1.259 18.258a2.034 2.034 0 01-2.029-1.985h4.058a2.034 2.034 0 01-2.033 1.985zm2.6-3.276H2.131a6.756 6.756 0 00.338-.593 16.318 16.318 0 001.3-7.214 4.934 4.934 0 119.867 0v.024a16.285 16.285 0 001.3 7.188 6.759 6.759 0 00.338.593z"
          fill={props.fill || '#fff'}
        />
      </Svg>
    );
  },
};

type SvgIconProps = {
  name:
    | 'update'
    | 'check2'
    | 'eyeOf'
    | 'check'
    | 'edit'
    | 'iraqFlag'
    | 'apple'
    | 'facebook'
    | 'google'
    | 'refresh'
    | 'lowPrice'
    | 'highPrice'
    | 'close'
    | 'logoText'
    | 'logo'
    | 'masterCard'
    | 'imagePlaceholder'
    | 'user2'
    | 'payment'
    | 'darkLinkedin'
    | 'darkYoutube'
    | 'darkInstagram'
    | 'darkTwitter'
    | 'darkFacebook'
    | 'lowAndHigh'
    | 'notification'
    | 'user'
    | 'location'
    | 'shop'
    | 'add'
    | 'search'
    | 'racing'
    | 'listLayout'
    | 'smallLayout'
    | 'arrowBack'
    | 'clock'
    | 'eye'
    | 'star'
    | 'share'
    | 'phone'
    | 'whatsapp';

  size: Number;
  color: String;
  rotate: Boolean;
  width: Number;
  height: Number;
  scale: Boolean;
};
export function SvgIcon(props: SvgIconProps) {
  return Icons[props.name]({
    width: props.width,
    height: props.height,
    fill: props.color,
    rotate: props.rotate,
    scale: props.scale,
  });
}
